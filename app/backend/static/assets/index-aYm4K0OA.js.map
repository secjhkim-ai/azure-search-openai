{"version":3,"mappings":"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","names":["appLogo","appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","configApi","askApi","request","headers","parsedResponse","chatApi","shouldStream","url","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","deleteUploadedFileApi","filename","listUploadedFilesApi","postChatHistoryApi","getChatHistoryListApi","count","continuationToken","getChatHistoryApi","id","deleteChatHistoryApi","RetrievalMode","GPT4VInput","VectorFields","isCitationValid","contextDataPoints","citationCandidate","dataPointsArray","dataPoint","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","daTranslation","enTranslation","esTranslation","frTranslation","jaTranslation","nlTranslation","ptBRTranslation","trTranslation","itTranslation","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","i18n","useTranslation","currentLng","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","SpeechOutputAzure","speechConfig","isLoading","setIsLoading","localPlayingState","setLocalPlayingState","t","playAudio","speechUrl","jsxs","Fragment","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","followupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","copied","setCopied","handleCopy","textToCopy","err","Stack","styles","ReactMarkdown","rehypeRaw","remarkGfm","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","loggedIn","useContext","isComposing","setIsComposing","useEffect","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Send28Filled","Example","value","onClick","ExampleList","onExampleClicked","useGPT4V","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","TokenUsageGraph","tokenUsage","reasoningEffort","prompt_tokens","completion_tokens","reasoning_tokens","total_tokens","calcPercent","SyntaxHighlighter","AgentPlan","query_plan","description","planning","step","queries","q","ThoughtProcess","thoughts","k","a11yLight","MarkdownViewer","src","setContent","setError","removeAnchorLinks","markdown","ancorLinksRegex","markdownText","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","useMsal","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","HistoryItem","onSelect","onDelete","isModalOpen","setIsModalOpen","handleDelete","useCallback","Delete24Regular","DeleteHistoryModal","isOpen","onClose","onConfirm","DefaultButton","HistoryProviderOptions","NoneProvider","answers","IndexedDBProvider","dbName","storeName","openDB","db","cursor","loadedItems","timestamp","tx","current","CosmosDBProvider","session","e","useHistoryManager","provider","HISTORY_COUNT_PER_LOAD","HistoryPanel","notify","onChatSelected","historyManager","history","setHistory","hasMoreHistory","setHasMoreHistory","loadMoreHistory","items","prevHistory","handleSelect","groupedHistory","groupHistory","Panel","PanelType","group","InfiniteLoadingButton","today","yesterday","lastWeek","lastMonth","groups","itemDate","func","buttonRef","useRef","observer","entries","entry","HistoryButton","History24Regular","SettingsButton","Settings24Regular","ClearChatButton","UploadFile","isCalloutVisible","setIsCalloutVisible","isUploading","setIsUploading","deletionStatus","setDeletionStatus","uploadedFile","setUploadedFile","uploadedFileError","setUploadedFileError","uploadedFiles","setUploadedFiles","handleButtonClick","listUploadedFiles","files","handleRemoveFile","handleUploadFile","file","formData","Add24Regular","Callout","Label","Text","TokenClaimsDisplay","instance","claims","setClaims","ToString","a","o","key","originalKey","columns","createTableColumn","b","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","LanguagePicker","onLanguageChange","handleLanguageChange","option","languagePickerId","useId","LocalLanguage24Regular","Dropdown","code","details","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","toggleIsCalloutVisible","useBoolean","descriptionId","iconButtonId","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","vectorFieldOption","setVectorFieldOption","onuseGPT4V","checked","onSetGPT4VInput","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","defaultVectorFields","retrievalMode","setRetrievalMode","vectorFields","setVectorFields","onRetrievalModeChange","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","Settings","promptTemplate","temperature","retrieveCount","maxSubqueryCount","resultsMergeStrategy","seed","minimumSearchScore","minimumRerankerScore","useSemanticRanker","useSemanticCaptions","useQueryRewriting","excludeCategory","includeCategory","gpt4vInput","showSemanticRankerOption","showQueryRewritingOption","showReasoningEffortOption","showGPT4VOptions","showVectorOption","useOidSecurityFilter","useGroupsSecurityFilter","onChange","streamingEnabled","useSuggestFollowupQuestions","promptTemplatePrefix","promptTemplateSuffix","showSuggestFollowupQuestions","showAgenticRetrievalOption","useAgenticRetrieval","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","agenticRetrievalId","agenticRetrievalFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","maxSubqueryCountId","maxSubqueryCountFieldId","resultsMergeStrategyFieldId","includeCategoryId","includeCategoryFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","queryRewritingFieldId","reasoningEffortFieldId","semanticCaptionsId","semanticCaptionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","renderLabel","labelId","fieldId","helpText","val","Chat","isConfigPanelOpen","setIsConfigPanelOpen","isHistoryPanelOpen","setIsHistoryPanelOpen","setPromptTemplate","setTemperature","setSeed","setMinimumRerankerScore","setMinimumSearchScore","setRetrieveCount","setMaxSubqueryCount","setResultsMergeStrategy","setUseSemanticRanker","setUseQueryRewriting","setReasoningEffort","setStreamingEnabled","setShouldStream","setUseSemanticCaptions","setIncludeCategory","setExcludeCategory","setUseSuggestFollowupQuestions","setUseOidSecurityFilter","setUseGroupsSecurityFilter","setGPT4VInput","lastQuestionRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","setShowGPT4VOptions","setShowSemanticRankerOption","setShowQueryRewritingOption","setShowReasoningEffortOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","showChatHistoryBrowser","setShowChatHistoryBrowser","showChatHistoryCosmos","setShowChatHistoryCosmos","setShowAgenticRetrievalOption","setUseAgenticRetrieval","audio","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","historyProvider","makeApiRequest","clearChat","handleSettingsChange","field","example","onShowCitation","onToggleTab","tab","Helmet","streamedAnswer","newLang","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","Layout","menuOpen","setMenuOpen","menuRef","toggleMenu","handleClickOutside","NavLink","isActive","Outlet","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","I18nextProvider","HelmetProvider","RouterProvider"],"ignoreList":[],"sources":["../../../frontend/src/assets/applogo.svg","../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/TokenUsageGraph.tsx","../../../frontend/src/components/AnalysisPanel/AgentPlan.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/HistoryItem/HistoryItem.tsx","../../../frontend/src/components/HistoryProviders/IProvider.ts","../../../frontend/src/components/HistoryProviders/None.ts","../../../frontend/src/components/HistoryProviders/IndexedDB.ts","../../../frontend/src/components/HistoryProviders/CosmosDB.ts","../../../frontend/src/components/HistoryProviders/HistoryManager.ts","../../../frontend/src/components/HistoryPanel/HistoryPanel.tsx","../../../frontend/src/components/HistoryButton/HistoryButton.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/i18n/LanguagePicker.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/Settings/Settings.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"data:image/svg+xml,%3csvg%20font-size='120px'%20aria-hidden='true'%20aria-label='Chat%20logo'%20fill='rgba(115,%20118,%20225,%201)'%20class='___12fm75w%20f1w7gpdv%20fez10in%20fg4l7m0'%20role='img'%20width='1em'%20height='1em'%20viewBox='0%200%2020%2020'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M7.4%2012.8a1.04%201.04%200%200%200%201.59-.51l.45-1.37a2.34%202.34%200%200%201%201.47-1.48l1.4-.45A1.04%201.04%200%200%200%2012.25%207l-1.37-.45A2.34%202.34%200%200%201%209.4%205.08L8.95%203.7a1.03%201.03%200%200%200-.82-.68%201.04%201.04%200%200%200-1.15.7l-.46%201.4a2.34%202.34%200%200%201-1.44%201.45L3.7%207a1.04%201.04%200%200%200%20.02%201.97l1.37.45a2.33%202.33%200%200%201%201.48%201.48l.46%201.4c.07.2.2.37.38.5Zm6.14%204.05a.8.8%200%200%200%201.22-.4l.25-.76a1.09%201.09%200%200%201%20.68-.68l.77-.25a.8.8%200%200%200-.02-1.52l-.77-.25a1.08%201.08%200%200%201-.68-.68l-.25-.77a.8.8%200%200%200-1.52.01l-.24.76a1.1%201.1%200%200%201-.67.68l-.77.25a.8.8%200%200%200%200%201.52l.77.25a1.09%201.09%200%200%201%20.68.68l.25.77c.06.16.16.3.3.4Z'%20fill='rgba(115,%20118,%20225,%201)'%3e%3c/path%3e%3c/svg%3e\"","// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\r\n\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nconst appServicesAuthTokenUrl = \".auth/me\";\r\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\r\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\r\n\r\ninterface AppServicesToken {\r\n    id_token: string;\r\n    access_token: string;\r\n    user_claims: Record<string, any>;\r\n    expires_on: string;\r\n}\r\n\r\ninterface AuthSetup {\r\n    // Set to true if login elements should be shown in the UI\r\n    useLogin: boolean;\r\n    // Set to true if access control is enforced by the application\r\n    requireAccessControl: boolean;\r\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\r\n    enableUnauthenticatedAccess: boolean;\r\n    /**\r\n     * Configuration object to be passed to MSAL instance on creation.\r\n     * For a full list of MSAL.js configuration parameters, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n     */\r\n    msalConfig: {\r\n        auth: {\r\n            clientId: string; // Client app id used for login\r\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\r\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\r\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n        };\r\n        cache: {\r\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\r\n        };\r\n    };\r\n    loginRequest: {\r\n        /**\r\n         * Scopes you add here will be prompted for user consent during sign-in.\r\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n         * For more information about OIDC scopes, visit:\r\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n         */\r\n        scopes: Array<string>;\r\n    };\r\n    tokenRequest: {\r\n        scopes: Array<string>;\r\n    };\r\n}\r\n\r\n// Fetch the auth setup JSON data from the API if not already cached\r\nasync function fetchAuthSetup(): Promise<AuthSetup> {\r\n    const response = await fetch(\"/auth_setup\");\r\n    if (!response.ok) {\r\n        throw new Error(`auth setup response was not ok: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nconst authSetup = await fetchAuthSetup();\r\n\r\nexport const useLogin = authSetup.useLogin;\r\n\r\nexport const requireAccessControl = authSetup.requireAccessControl;\r\n\r\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\r\n\r\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation.\r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport const msalConfig = authSetup.msalConfig;\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit:\r\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n */\r\nexport const loginRequest = authSetup.loginRequest;\r\n\r\nconst tokenRequest = authSetup.tokenRequest;\r\n\r\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\r\nexport const getRedirectUri = () => {\r\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\r\n};\r\n\r\n// Cache the app services token if it's available\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\r\ndeclare global {\r\n    var cachedAppServicesToken: AppServicesToken | null;\r\n}\r\nglobalThis.cachedAppServicesToken = null;\r\n\r\n/**\r\n * Retrieves an access token if the user is logged in using app services authentication.\r\n * Checks if the current token is expired and fetches a new token if necessary.\r\n * Returns null if the app doesn't support app services authentication.\r\n *\r\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\r\n */\r\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\r\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\r\n        const currentDate = new Date();\r\n        const expiresOnDate = new Date(appServicesToken.expires_on);\r\n        return expiresOnDate > currentDate;\r\n    };\r\n\r\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\r\n        return Promise.resolve(globalThis.cachedAppServicesToken);\r\n    }\r\n\r\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\r\n        return fetch(appServicesAuthTokenUrl).then(r => {\r\n            if (r.ok) {\r\n                return r.json().then(json => {\r\n                    if (json.length > 0) {\r\n                        return {\r\n                            id_token: json[0][\"id_token\"] as string,\r\n                            access_token: json[0][\"access_token\"] as string,\r\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\r\n                                acc[item.typ] = item.val;\r\n                                return acc;\r\n                            }, {}) as Record<string, any>,\r\n                            expires_on: json[0][\"expires_on\"] as string\r\n                        } as AppServicesToken;\r\n                    }\r\n\r\n                    return null;\r\n                });\r\n            }\r\n\r\n            return null;\r\n        });\r\n    };\r\n\r\n    return getAppServicesTokenFromMe().then(token => {\r\n        if (token) {\r\n            if (checkNotExpired(token)) {\r\n                globalThis.cachedAppServicesToken = token;\r\n                return token;\r\n            }\r\n\r\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\r\n                if (r.ok) {\r\n                    return getAppServicesTokenFromMe();\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\r\n\r\n// Sign out of app services\r\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\r\nexport const appServicesLogout = () => {\r\n    window.location.href = appServicesAuthLogoutUrl;\r\n};\r\n\r\n/**\r\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\r\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\r\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\r\n */\r\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\r\n    if (client) {\r\n        const activeAccount = client.getActiveAccount();\r\n        if (activeAccount) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n// Get an access token for use with the API server.\r\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\r\n// Use the access token from app services login if available\r\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return Promise.resolve(appServicesToken.access_token);\r\n    }\r\n\r\n    return client\r\n        .acquireTokenSilent({\r\n            ...tokenRequest,\r\n            redirectUri: getRedirectUri()\r\n        })\r\n        .then(r => r.accessToken)\r\n        .catch(error => {\r\n            console.log(error);\r\n            return undefined;\r\n        });\r\n};\r\n\r\n/**\r\n * Retrieves the username of the active account.\r\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\r\n */\r\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.username;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken?.user_claims) {\r\n        return appServicesToken.user_claims.preferred_username;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Retrieves the token claims of the active account.\r\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\r\n */\r\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.idTokenClaims;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return appServicesToken.user_claims;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","const BACKEND_URI = \"\";\r\n\r\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse, HistoryListApiResponse, HistoryApiResponse } from \"./models\";\r\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\r\n\r\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\r\n    // If using login and not using app services, add the id token of the logged in account as the authorization\r\n    if (useLogin && !isUsingAppServicesLogin) {\r\n        if (idToken) {\r\n            return { Authorization: `Bearer ${idToken}` };\r\n        }\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nexport async function configApi(): Promise<Config> {\r\n    const response = await fetch(`${BACKEND_URI}/config`, {\r\n        method: \"GET\"\r\n    });\r\n\r\n    return (await response.json()) as Config;\r\n}\r\n\r\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(`${BACKEND_URI}/ask`, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(`Request failed with status ${response.status}`);\r\n    }\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (parsedResponse.error) {\r\n        throw Error(parsedResponse.error);\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\r\n    let url = `${BACKEND_URI}/chat`;\r\n    if (shouldStream) {\r\n        url += \"/stream\";\r\n    }\r\n    const headers = await getHeaders(idToken);\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport async function getSpeechApi(text: string): Promise<string | null> {\r\n    return await fetch(\"/speech\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            text: text\r\n        })\r\n    })\r\n        .then(response => {\r\n            if (response.status == 200) {\r\n                return response.blob();\r\n            } else if (response.status == 400) {\r\n                console.log(\"Speech synthesis is not enabled.\");\r\n                return null;\r\n            } else {\r\n                console.error(\"Unable to get speech synthesis.\");\r\n                return null;\r\n            }\r\n        })\r\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${BACKEND_URI}/content/${citation}`;\r\n}\r\n\r\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\r\n    const response = await fetch(\"/upload\", {\r\n        method: \"POST\",\r\n        headers: await getHeaders(idToken),\r\n        body: request\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Uploading files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(\"/delete_uploaded\", {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ filename })\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting file failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\r\n    const response = await fetch(`/list_uploaded`, {\r\n        method: \"GET\",\r\n        headers: await getHeaders(idToken)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Listing files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: string[] = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function postChatHistoryApi(item: any, idToken: string): Promise<any> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(\"/chat_history\", {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(item)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Posting chat history failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: any = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function getChatHistoryListApi(count: number, continuationToken: string | undefined, idToken: string): Promise<HistoryListApiResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    let url = `${BACKEND_URI}/chat_history/sessions?count=${count}`;\r\n    if (continuationToken) {\r\n        url += `&continuationToken=${continuationToken}`;\r\n    }\r\n\r\n    const response = await fetch(url.toString(), {\r\n        method: \"GET\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Getting chat histories failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: HistoryListApiResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function getChatHistoryApi(id: string, idToken: string): Promise<HistoryApiResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(`/chat_history/sessions/${id}`, {\r\n        method: \"GET\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Getting chat history failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: HistoryApiResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function deleteChatHistoryApi(id: string, idToken: string): Promise<any> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(`/chat_history/sessions/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting chat history failed: ${response.statusText}`);\r\n    }\r\n}\r\n","export const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport const enum GPT4VInput {\r\n    TextAndImages = \"textAndImages\",\r\n    Images = \"images\",\r\n    Texts = \"texts\"\r\n}\r\n\r\nexport const enum VectorFields {\r\n    Embedding = \"textEmbeddingOnly\",\r\n    ImageEmbedding = \"imageEmbeddingOnly\",\r\n    TextAndImageEmbeddings = \"textAndImageEmbeddings\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    retrieval_mode?: RetrievalMode;\r\n    semantic_ranker?: boolean;\r\n    semantic_captions?: boolean;\r\n    query_rewriting?: boolean;\r\n    reasoning_effort?: string;\r\n    include_category?: string;\r\n    exclude_category?: string;\r\n    seed?: number;\r\n    top?: number;\r\n    max_subqueries?: number;\r\n    results_merge_strategy?: string;\r\n    temperature?: number;\r\n    minimum_search_score?: number;\r\n    minimum_reranker_score?: number;\r\n    prompt_template?: string;\r\n    prompt_template_prefix?: string;\r\n    prompt_template_suffix?: string;\r\n    suggest_followup_questions?: boolean;\r\n    use_oid_security_filter?: boolean;\r\n    use_groups_security_filter?: boolean;\r\n    use_gpt4v?: boolean;\r\n    gpt4v_input?: GPT4VInput;\r\n    vector_fields: VectorFields;\r\n    language: string;\r\n    use_agentic_retrieval: boolean;\r\n};\r\n\r\nexport type ResponseMessage = {\r\n    content: string;\r\n    role: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: any };\r\n};\r\n\r\nexport type ResponseContext = {\r\n    data_points: string[];\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport type ChatAppResponseOrError = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n    error?: string;\r\n};\r\n\r\nexport type ChatAppResponse = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type ChatAppRequestContext = {\r\n    overrides?: ChatAppRequestOverrides;\r\n};\r\n\r\nexport type ChatAppRequest = {\r\n    messages: ResponseMessage[];\r\n    context?: ChatAppRequestContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type Config = {\r\n    defaultReasoningEffort: string;\r\n    showGPT4VOptions: boolean;\r\n    showSemanticRankerOption: boolean;\r\n    showQueryRewritingOption: boolean;\r\n    showReasoningEffortOption: boolean;\r\n    streamingEnabled: boolean;\r\n    showVectorOption: boolean;\r\n    showUserUpload: boolean;\r\n    showLanguagePicker: boolean;\r\n    showSpeechInput: boolean;\r\n    showSpeechOutputBrowser: boolean;\r\n    showSpeechOutputAzure: boolean;\r\n    showChatHistoryBrowser: boolean;\r\n    showChatHistoryCosmos: boolean;\r\n    showAgenticRetrievalOption: boolean;\r\n};\r\n\r\nexport type SimpleAPIResponse = {\r\n    message?: string;\r\n};\r\n\r\nexport interface SpeechConfig {\r\n    speechUrls: (string | null)[];\r\n    setSpeechUrls: (urls: (string | null)[]) => void;\r\n    audio: HTMLAudioElement;\r\n    isPlaying: boolean;\r\n    setIsPlaying: (isPlaying: boolean) => void;\r\n}\r\n\r\nexport type HistoryListApiResponse = {\r\n    sessions: {\r\n        id: string;\r\n        entra_oid: string;\r\n        title: string;\r\n        timestamp: number;\r\n    }[];\r\n    continuation_token?: string;\r\n};\r\n\r\nexport type HistoryApiResponse = {\r\n    id: string;\r\n    entra_oid: string;\r\n    answers: any;\r\n};\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\n// Function to validate citation format and check if dataPoint starts with possible citation\r\nfunction isCitationValid(contextDataPoints: any, citationCandidate: string): boolean {\r\n    const regex = /.+\\.\\w{1,}(?:#\\S*)?$/;\r\n    if (!regex.test(citationCandidate)) {\r\n        return false;\r\n    }\r\n\r\n    // Check if contextDataPoints is an object with a text property that is an array\r\n    let dataPointsArray: string[];\r\n    if (Array.isArray(contextDataPoints)) {\r\n        dataPointsArray = contextDataPoints;\r\n    } else if (contextDataPoints && Array.isArray(contextDataPoints.text)) {\r\n        dataPointsArray = contextDataPoints.text;\r\n    } else {\r\n        return false;\r\n    }\r\n\r\n    const isValidCitation = dataPointsArray.some(dataPoint => {\r\n        return dataPoint.startsWith(citationCandidate);\r\n    });\r\n\r\n    return isValidCitation;\r\n}\r\n\r\nexport function parseAnswerToHtml(answer: ChatAppResponse, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const contextDataPoints = answer.context.data_points;\r\n    const citations: string[] = [];\r\n\r\n    // Trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.message.content.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n\r\n            if (!isCitationValid(contextDataPoints, part)) {\r\n                return `[${part}]`;\r\n            }\r\n\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import i18next from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport HttpApi from \"i18next-http-backend\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport daTranslation from \"../locales/da/translation.json\";\r\nimport enTranslation from \"../locales/en/translation.json\";\r\nimport esTranslation from \"../locales/es/translation.json\";\r\nimport frTranslation from \"../locales/fr/translation.json\";\r\nimport jaTranslation from \"../locales/ja/translation.json\";\r\nimport nlTranslation from \"../locales/nl/translation.json\";\r\nimport ptBRTranslation from \"../locales/ptBR/translation.json\";\r\nimport trTranslation from \"../locales/tr/translation.json\";\r\nimport itTranslation from \"../locales/it/translation.json\";\r\n\r\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\r\n    da: {\r\n        name: \"Dansk\",\r\n        locale: \"da-DK\"\r\n    },\r\n    en: {\r\n        name: \"English\",\r\n        locale: \"en-US\"\r\n    },\r\n    es: {\r\n        name: \"Español\",\r\n        locale: \"es-ES\"\r\n    },\r\n    fr: {\r\n        name: \"Français\",\r\n        locale: \"fr-FR\"\r\n    },\r\n    ja: {\r\n        name: \"日本語\",\r\n        locale: \"ja-JP\"\r\n    },\r\n    nl: {\r\n        name: \"Nederlands\",\r\n        locale: \"nl-NL\"\r\n    },\r\n    ptBR: {\r\n        name: \"Português Brasileiro\",\r\n        locale: \"pt-BR\"\r\n    },\r\n    tr: {\r\n        name: \"Türkçe\",\r\n        locale: \"tr-TR\"\r\n    },\r\n    it: {\r\n        name: \"Italiano\",\r\n        locale: \"it-IT\"\r\n    }\r\n};\r\n\r\ni18next\r\n    .use(HttpApi)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    // init i18next\r\n    // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n        resources: {\r\n            da: { translation: daTranslation },\r\n            en: { translation: enTranslation },\r\n            es: { translation: esTranslation },\r\n            fr: { translation: frTranslation },\r\n            ja: { translation: jaTranslation },\r\n            nl: { translation: nlTranslation },\r\n            ptBR: { translation: ptBRTranslation },\r\n            tr: { translation: trTranslation },\r\n            it: { translation: itTranslation }\r\n        },\r\n        fallbackLng: \"en\",\r\n        supportedLngs: Object.keys(supportedLngs),\r\n        debug: import.meta.env.DEV,\r\n        interpolation: {\r\n            escapeValue: false // not needed for react as it escapes by default\r\n        }\r\n    });\r\n\r\nexport default i18next;\r\n","import { useState } from \"react\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { supportedLngs } from \"../../i18n/config\";\r\n\r\ninterface Props {\r\n    answer: string;\r\n}\r\n\r\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\r\n\r\nlet synth: SpeechSynthesis | null = null;\r\n\r\ntry {\r\n    synth = SpeechSynthesis;\r\n} catch (err) {\r\n    console.error(\"SpeechSynthesis is not supported\");\r\n}\r\n\r\nconst getUtterance = function (text: string, lngCode: string = \"en-US\") {\r\n    if (synth) {\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.lang = lngCode;\r\n        utterance.volume = 1;\r\n        utterance.rate = 1;\r\n        utterance.pitch = 1;\r\n\r\n        let voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\r\n        if (!voice) {\r\n            voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\r\n        }\r\n\r\n        utterance.voice = voice;\r\n        return utterance;\r\n    }\r\n};\r\n\r\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const currentLng = i18n.language;\r\n    let lngCode = supportedLngs[currentLng]?.locale;\r\n    if (!lngCode) {\r\n        lngCode = \"en-US\";\r\n    }\r\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n\r\n    const startOrStopSpeech = (answer: string) => {\r\n        if (synth != null) {\r\n            if (isPlaying) {\r\n                synth.cancel(); // removes all utterances from the utterance queue.\r\n                setIsPlaying(false);\r\n                return;\r\n            }\r\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\r\n\r\n            if (!utterance) {\r\n                return;\r\n            }\r\n\r\n            synth.speak(utterance);\r\n\r\n            utterance.onstart = () => {\r\n                setIsPlaying(true);\r\n                return;\r\n            };\r\n\r\n            utterance.onend = () => {\r\n                setIsPlaying(false);\r\n                return;\r\n            };\r\n        }\r\n    };\r\n    const color = isPlaying ? \"red\" : \"black\";\r\n\r\n    return (\r\n        <IconButton\r\n            style={{ color: color }}\r\n            iconProps={{ iconName: \"Volume3\" }}\r\n            title={t(\"tooltips.speakAnswer\")}\r\n            ariaLabel={t(\"tooltips.speakAnswer\")}\r\n            onClick={() => startOrStopSpeech(answer)}\r\n            disabled={!synth}\r\n        />\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { getSpeechApi, SpeechConfig } from \"../../api\";\r\n\r\ninterface Props {\r\n    answer: string;\r\n    speechConfig: SpeechConfig;\r\n    index: number;\r\n    isStreaming: boolean;\r\n}\r\n\r\nexport const SpeechOutputAzure = ({ answer, speechConfig, index, isStreaming }: Props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [localPlayingState, setLocalPlayingState] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    const playAudio = async (url: string) => {\r\n        speechConfig.audio.src = url;\r\n        await speechConfig.audio\r\n            .play()\r\n            .then(() => {\r\n                speechConfig.audio.onended = () => {\r\n                    speechConfig.setIsPlaying(false);\r\n                    setLocalPlayingState(false);\r\n                };\r\n                speechConfig.setIsPlaying(true);\r\n                setLocalPlayingState(true);\r\n            })\r\n            .catch(() => {\r\n                alert(\"Failed to play speech output.\");\r\n                console.error(\"Failed to play speech output.\");\r\n                speechConfig.setIsPlaying(false);\r\n                setLocalPlayingState(false);\r\n            });\r\n    };\r\n\r\n    const startOrStopSpeech = async (answer: string) => {\r\n        if (speechConfig.isPlaying) {\r\n            speechConfig.audio.pause();\r\n            speechConfig.audio.currentTime = 0;\r\n            speechConfig.setIsPlaying(false);\r\n            setLocalPlayingState(false);\r\n            return;\r\n        }\r\n        if (speechConfig.speechUrls[index]) {\r\n            playAudio(speechConfig.speechUrls[index]);\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        await getSpeechApi(answer).then(async speechUrl => {\r\n            if (!speechUrl) {\r\n                alert(\"Speech output is not available.\");\r\n                console.error(\"Speech output is not available.\");\r\n                return;\r\n            }\r\n            setIsLoading(false);\r\n            speechConfig.setSpeechUrls(speechConfig.speechUrls.map((url, i) => (i === index ? speechUrl : url)));\r\n            playAudio(speechUrl);\r\n        });\r\n    };\r\n\r\n    const color = localPlayingState ? \"red\" : \"black\";\r\n\r\n    // We always preload the Sync icon in hidden mode so that there's no visual glitch when icon changes\r\n    return isLoading ? (\r\n        <IconButton style={{ color: color }} iconProps={{ iconName: \"Sync\" }} title=\"Loading speech\" ariaLabel=\"Loading speech\" disabled={true} />\r\n    ) : (\r\n        <>\r\n            <IconButton iconProps={{ iconName: \"Sync\" }} ariaHidden={true} disabled={true} style={{ display: \"none\" }} />\r\n            <IconButton\r\n                style={{ color: color }}\r\n                iconProps={{ iconName: \"Volume3\" }}\r\n                title={t(\"tooltips.speakAnswer\")}\r\n                ariaLabel={t(\"tooltips.speakAnswer\")}\r\n                onClick={() => startOrStopSpeech(answer)}\r\n                disabled={isStreaming}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DOMPurify from \"dompurify\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeRaw from \"rehype-raw\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { ChatAppResponse, getCitationFilePath, SpeechConfig } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\r\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\r\n\r\ninterface Props {\r\n    answer: ChatAppResponse;\r\n    index: number;\r\n    speechConfig: SpeechConfig;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n    showSpeechOutputBrowser?: boolean;\r\n    showSpeechOutputAzure?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    index,\r\n    speechConfig,\r\n    isSelected,\r\n    isStreaming,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions,\r\n    showSpeechOutputAzure,\r\n    showSpeechOutputBrowser\r\n}: Props) => {\r\n    const followupQuestions = answer.context?.followup_questions;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer, isStreaming, onCitationClicked), [answer]);\r\n    const { t } = useTranslation();\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n    const [copied, setCopied] = useState(false);\r\n\r\n    const handleCopy = () => {\r\n        // Single replace to remove all HTML tags to remove the citations\r\n        const textToCopy = sanitizedAnswerHtml.replace(/<a [^>]*><sup>\\d+<\\/sup><\\/a>|<[^>]+>/g, \"\");\r\n\r\n        navigator.clipboard\r\n            .writeText(textToCopy)\r\n            .then(() => {\r\n                setCopied(true);\r\n                setTimeout(() => setCopied(false), 2000);\r\n            })\r\n            .catch(err => console.error(\"Failed to copy text: \", err));\r\n    };\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: copied ? \"CheckMark\" : \"Copy\" }}\r\n                            title={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\r\n                            ariaLabel={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\r\n                            onClick={handleCopy}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title={t(\"tooltips.showThoughtProcess\")}\r\n                            ariaLabel={t(\"tooltips.showThoughtProcess\")}\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.context.thoughts?.length || isStreaming}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title={t(\"tooltips.showSupportingContent\")}\r\n                            ariaLabel={t(\"tooltips.showSupportingContent\")}\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.context.data_points || isStreaming}\r\n                        />\r\n                        {showSpeechOutputAzure && (\r\n                            <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\r\n                        )}\r\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText}>\r\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\r\n                </div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const { t, i18n } = useTranslation();\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        {t(\"generatingAnswer\")}\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { SetStateAction, useState } from \"react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Mic28Filled } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { supportedLngs } from \"../../i18n/config\";\r\n\r\ninterface Props {\r\n    updateQuestion: (question: string) => void;\r\n}\r\n\r\nconst useCustomSpeechRecognition = () => {\r\n    const { i18n } = useTranslation();\r\n    const currentLng = i18n.language;\r\n    let lngCode = supportedLngs[currentLng]?.locale;\r\n    if (!lngCode) {\r\n        lngCode = \"en-US\";\r\n    }\r\n\r\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\r\n    let speechRecognition: {\r\n        continuous: boolean;\r\n        lang: string;\r\n        interimResults: boolean;\r\n        maxAlternatives: number;\r\n        start: () => void;\r\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\r\n        onend: () => void;\r\n        onerror: (event: { error: string }) => void;\r\n        stop: () => void;\r\n    } | null = null;\r\n\r\n    try {\r\n        speechRecognition = new SpeechRecognition();\r\n        if (speechRecognition != null) {\r\n            speechRecognition.lang = lngCode;\r\n            speechRecognition.interimResults = true;\r\n        }\r\n    } catch (err) {\r\n        console.error(\"SpeechRecognition not supported\");\r\n        speechRecognition = null;\r\n    }\r\n\r\n    return speechRecognition;\r\n};\r\n\r\nexport const SpeechInput = ({ updateQuestion }: Props) => {\r\n    let speechRecognition = useCustomSpeechRecognition();\r\n    const { t } = useTranslation();\r\n    const [isRecording, setIsRecording] = useState<boolean>(false);\r\n    const startRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n\r\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\r\n            let input = \"\";\r\n            for (const result of event.results) {\r\n                input += result[0].transcript;\r\n            }\r\n            updateQuestion(input);\r\n        };\r\n        speechRecognition.onend = () => {\r\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\r\n            setIsRecording(false);\r\n        };\r\n        speechRecognition.onerror = (event: { error: string }) => {\r\n            if (speechRecognition) {\r\n                speechRecognition.stop();\r\n                if (event.error == \"no-speech\") {\r\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\r\n                } else if (event.error == \"language-not-supported\") {\r\n                    alert(\r\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\r\n                    );\r\n                } else {\r\n                    alert(`Speech recognition error detected: ${event.error}.`);\r\n                }\r\n            }\r\n        };\r\n\r\n        setIsRecording(true);\r\n        speechRecognition.start();\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n        speechRecognition.stop();\r\n        setIsRecording(false);\r\n    };\r\n\r\n    if (speechRecognition == null) {\r\n        return <></>;\r\n    }\r\n    return (\r\n        <>\r\n            {!isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n            {isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/**\r\n * This file defines a context for managing login state in a React application.\r\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\r\n * For more information, refer to the official React documentation:\r\n * https://react.dev/learn/passing-data-deeply-with-context\r\n */\r\n\r\nimport { createContext } from \"react\";\r\n\r\nexport const LoginContext = createContext({\r\n    loggedIn: false,\r\n    setLoggedIn: (_: boolean) => {}\r\n});\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { SpeechInput } from \"./SpeechInput\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { requireLogin } from \"../../authConfig\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n    showSpeechInput?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const { loggedIn } = useContext(LoginContext);\r\n    const { t } = useTranslation();\r\n    const [isComposing, setIsComposing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        initQuestion && setQuestion(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (isComposing) return;\r\n\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const handleCompositionStart = () => {\r\n        setIsComposing(true);\r\n    };\r\n    const handleCompositionEnd = () => {\r\n        setIsComposing(false);\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\r\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\r\n\r\n    if (disableRequiredAccessControl) {\r\n        placeholder = \"Please login to continue...\";\r\n    }\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                disabled={disableRequiredAccessControl}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n                onCompositionStart={handleCompositionStart}\r\n                onCompositionEnd={handleCompositionEnd}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <Tooltip content={t(\"tooltips.submitQuestion\")} relationship=\"label\">\r\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\r\n                </Tooltip>\r\n            </div>\r\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n    useGPT4V?: boolean;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const DEFAULT_EXAMPLES: string[] = [t(\"defaultExamples.1\"), t(\"defaultExamples.2\"), t(\"defaultExamples.3\")];\r\n    const GPT4V_EXAMPLES: string[] = [t(\"gpt4vExamples.1\"), t(\"gpt4vExamples.2\"), t(\"gpt4vExamples.3\")];\r\n\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\r\n                <li key={i}>\r\n                    <Example text={question} value={question} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import DOMPurify from \"dompurify\";\r\n\r\ntype ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[] | { text: string[]; images?: string[] };\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\r\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {textItems.map((c, ind) => {\r\n                const parsed = parseSupportingContentItem(c);\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={`supporting-content-text-${ind}`}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\r\n                    </li>\r\n                );\r\n            })}\r\n            {imageItems?.map((img, ind) => {\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={`supporting-content-image-${ind}`}>\r\n                        <img className={styles.supportingContentItemImage} src={img} />\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nexport interface TokenUsage {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n    reasoning_tokens: number;\r\n    total_tokens: number;\r\n}\r\n\r\ninterface TokenUsageGraphProps {\r\n    tokenUsage: TokenUsage;\r\n    reasoningEffort?: string;\r\n}\r\n\r\nexport const TokenUsageGraph: React.FC<TokenUsageGraphProps> = ({ tokenUsage, reasoningEffort }) => {\r\n    const { prompt_tokens, completion_tokens, reasoning_tokens, total_tokens } = tokenUsage;\r\n\r\n    // Calculate percentage widths relative to total_tokens\r\n    const calcPercent = (value: number) => (total_tokens ? (value / total_tokens) * 100 : 0) + \"%\";\r\n\r\n    return (\r\n        <div className={styles.tokenUsageGraph}>\r\n            <div className={styles.header}>Token Usage</div>\r\n            <div className={styles.primaryBarContainer} style={{ width: \"100%\" }}>\r\n                <div className={`${styles.tokenBar} ${styles.promptBar}`} style={{ width: calcPercent(prompt_tokens) }}>\r\n                    <span className={styles.tokenLabel}>Prompt: {prompt_tokens}</span>\r\n                </div>\r\n                {reasoningEffort != null && reasoningEffort !== \"\" && (\r\n                    <div className={`${styles.tokenBar} ${styles.reasoningBar}`} style={{ width: calcPercent(reasoning_tokens) }}>\r\n                        <span className={styles.tokenLabel}>Reasoning: {reasoning_tokens}</span>\r\n                    </div>\r\n                )}\r\n                <div className={`${styles.tokenBar} ${styles.outputBar}`} style={{ width: calcPercent(completion_tokens - reasoning_tokens) }}>\r\n                    <span className={styles.tokenLabel}>Output: {completion_tokens - reasoning_tokens}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={`${styles.tokenBar} ${styles.totalBar}`} style={{ width: calcPercent(total_tokens) }}>\r\n                <span className={styles.tokenLabel}>Total: {total_tokens}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { TokenUsageGraph, TokenUsage } from \"./TokenUsageGraph\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\r\nimport styles from \"./AnalysisPanel.module.css\";\r\nSyntaxHighlighter.registerLanguage(\"json\", json);\r\n\r\ntype ModelQueryPlanningStep = {\r\n    id: number;\r\n    type: \"ModelQueryPlanning\";\r\n    input_tokens: number;\r\n    output_tokens: number;\r\n};\r\n\r\ntype AzureSearchQueryStep = {\r\n    id: number;\r\n    type: \"AzureSearchQuery\";\r\n    target_index: string;\r\n    query: { search: string };\r\n    query_time: string;\r\n    count: number;\r\n    elapsed_ms: number;\r\n};\r\n\r\ntype Step = ModelQueryPlanningStep | AzureSearchQueryStep;\r\n\r\ninterface Props {\r\n    query_plan: Step[];\r\n    description: any;\r\n}\r\n\r\nexport const AgentPlan: React.FC<Props> = ({ query_plan, description }) => {\r\n    // find the planning step\r\n    const planning = query_plan.find((step): step is ModelQueryPlanningStep => step.type === \"ModelQueryPlanning\");\r\n\r\n    // collect all search query steps\r\n    const queries = query_plan.filter((step): step is AzureSearchQueryStep => step.type === \"AzureSearchQuery\");\r\n\r\n    return (\r\n        <div>\r\n            {planning && (\r\n                <TokenUsageGraph\r\n                    tokenUsage={\r\n                        {\r\n                            prompt_tokens: planning.input_tokens,\r\n                            completion_tokens: planning.output_tokens,\r\n                            reasoning_tokens: 0,\r\n                            total_tokens: planning.input_tokens + planning.output_tokens\r\n                        } as TokenUsage\r\n                    }\r\n                />\r\n            )}\r\n\r\n            <div className={styles.header}>Subqueries</div>\r\n            {queries.length > 0 && (\r\n                <table className={styles.subqueriesTable}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Subquery</th>\r\n                            <th>Total Result Count</th>\r\n                            <th>Elapsed MS</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {queries.map(q => (\r\n                            <tr key={q.id}>\r\n                                <td>{q.query.search}</td>\r\n                                <td>{q.count}</td>\r\n                                <td>{q.elapsed_ms}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\r\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { Thoughts } from \"../../api\";\r\nimport { TokenUsageGraph } from \"./TokenUsageGraph\";\r\nimport { AgentPlan } from \"./AgentPlan\";\r\n\r\nSyntaxHighlighter.registerLanguage(\"json\", json);\r\n\r\ninterface Props {\r\n    thoughts: Thoughts[];\r\n}\r\n\r\nexport const ThoughtProcess = ({ thoughts }: Props) => {\r\n    return (\r\n        <ul className={styles.tList}>\r\n            {thoughts.map((t, ind) => {\r\n                return (\r\n                    <li className={styles.tListItem} key={ind}>\r\n                        <div className={styles.tStep}>{t.title}</div>\r\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                            {t.props &&\r\n                                (Object.keys(t.props).filter(k => k !== \"token_usage\" && k !== \"query_plan\") || []).map((k: any) => (\r\n                                    <span className={styles.tProp} key={k}>\r\n                                        {k}: {JSON.stringify(t.props?.[k])}\r\n                                    </span>\r\n                                ))}\r\n                        </Stack>\r\n                        {t.props?.token_usage && <TokenUsageGraph tokenUsage={t.props.token_usage} reasoningEffort={t.props.reasoning_effort} />}\r\n                        {t.props?.query_plan && <AgentPlan query_plan={t.props.query_plan} description={t.description} />}\r\n                        {Array.isArray(t.description) ? (\r\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\r\n                                {JSON.stringify(t.description, null, 2)}\r\n                            </SyntaxHighlighter>\r\n                        ) : (\r\n                            <div>{t.description}</div>\r\n                        )}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\nimport styles from \"./MarkdownViewer.module.css\";\r\n\r\ninterface MarkdownViewerProps {\r\n    src: string;\r\n}\r\n\r\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\r\n    const [content, setContent] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const { t } = useTranslation();\r\n\r\n    /**\r\n     * Anchor links result in HTTP 404 errors as the URL they point to does not exist.\r\n     * This function removes them from the markdown.\r\n     */\r\n    const removeAnchorLinks = (markdown: string) => {\r\n        const ancorLinksRegex = /\\[.*?\\]\\(#.*?\\)/g;\r\n        return markdown.replace(ancorLinksRegex, \"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchMarkdown = async () => {\r\n            try {\r\n                const response = await fetch(src);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed loading markdown file.\");\r\n                }\r\n\r\n                let markdownText = await response.text();\r\n                markdownText = removeAnchorLinks(markdownText);\r\n                setContent(markdownText);\r\n            } catch (error: any) {\r\n                setError(error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMarkdown();\r\n    }, [src]);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? (\r\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\r\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\r\n                </div>\r\n            ) : error ? (\r\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\r\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\r\n                        {error.message}\r\n                        <Link href={src} download>\r\n                            Download the file\r\n                        </Link>\r\n                    </MessageBar>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <IconButton\r\n                        className={styles.downloadButton}\r\n                        style={{ color: \"black\" }}\r\n                        iconProps={{ iconName: \"Save\" }}\r\n                        title={t(\"tooltips.save\")}\r\n                        ariaLabel={t(\"tooltips.save\")}\r\n                        href={src}\r\n                        download\r\n                    />\r\n                    <ReactMarkdown children={content} remarkPlugins={[remarkGfm]} className={`${styles.markdown} ${styles.markdownViewer}`} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { ChatAppResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\nimport { MarkdownViewer } from \"../MarkdownViewer\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getHeaders } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: ChatAppResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n    const [citation, setCitation] = useState(\"\");\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { t } = useTranslation();\r\n\r\n    const fetchCitation = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        if (activeCitation) {\r\n            // Get hash from the URL as it may contain #page=N\r\n            // which helps browser PDF renderer jump to correct page N\r\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\r\n            const response = await fetch(activeCitation, {\r\n                method: \"GET\",\r\n                headers: await getHeaders(token)\r\n            });\r\n            const citationContent = await response.blob();\r\n            let citationObjectUrl = URL.createObjectURL(citationContent);\r\n            // Add hash back to the new blob URL\r\n            if (originalHash) {\r\n                citationObjectUrl += \"#\" + originalHash;\r\n            }\r\n            setCitation(citationObjectUrl);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchCitation();\r\n    }, []);\r\n\r\n    const renderFileViewer = () => {\r\n        if (!activeCitation) {\r\n            return null;\r\n        }\r\n\r\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\r\n        switch (fileExtension) {\r\n            case \"png\":\r\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\r\n            case \"md\":\r\n                return <MarkdownViewer src={activeCitation} />;\r\n            default:\r\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText={t(\"headerTexts.thoughtProcess\")}\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText={t(\"headerTexts.supportingContent\")}\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.context.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText={t(\"headerTexts.citation\")}\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                {renderFileViewer()}\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { useState, useCallback } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./HistoryItem.module.css\";\r\nimport { DefaultButton } from \"@fluentui/react\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\n\r\nexport interface HistoryData {\r\n    id: string;\r\n    title: string;\r\n    timestamp: number;\r\n}\r\n\r\ninterface HistoryItemProps {\r\n    item: HistoryData;\r\n    onSelect: (id: string) => void;\r\n    onDelete: (id: string) => void;\r\n}\r\n\r\nexport function HistoryItem({ item, onSelect, onDelete }: HistoryItemProps) {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        setIsModalOpen(false);\r\n        onDelete(item.id);\r\n    }, [item.id, onDelete]);\r\n\r\n    return (\r\n        <div className={styles.historyItem}>\r\n            <button onClick={() => onSelect(item.id)} className={styles.historyItemButton}>\r\n                <div className={styles.historyItemTitle}>{item.title}</div>\r\n            </button>\r\n            <button onClick={() => setIsModalOpen(true)} className={styles.deleteButton} aria-label=\"delete this chat history\">\r\n                <Delete24Regular className={styles.deleteIcon} />\r\n            </button>\r\n            <DeleteHistoryModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={handleDelete} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DeleteHistoryModal({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) {\r\n    if (!isOpen) return null;\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={styles.modalOverlay}>\r\n            <div className={styles.modalContent}>\r\n                <h2 className={styles.modalTitle}>{t(\"history.deleteModalTitle\")}</h2>\r\n                <p className={styles.modalDescription}>{t(\"history.deleteModalDescription\")}</p>\r\n                <div className={styles.modalActions}>\r\n                    <DefaultButton onClick={onClose} className={styles.modalCancelButton}>\r\n                        {t(\"history.cancelLabel\")}\r\n                    </DefaultButton>\r\n                    <DefaultButton onClick={onConfirm} className={styles.modalConfirmButton}>\r\n                        {t(\"history.deleteLabel\")}\r\n                    </DefaultButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ChatAppResponse } from \"../../api\";\r\n\r\nexport type HistoryMetaData = { id: string; title: string; timestamp: number };\r\nexport type Answers = [user: string, response: ChatAppResponse][];\r\n\r\nexport const enum HistoryProviderOptions {\r\n    None = \"none\",\r\n    IndexedDB = \"indexedDB\",\r\n    CosmosDB = \"cosmosDB\"\r\n}\r\n\r\nexport interface IHistoryProvider {\r\n    getProviderName(): HistoryProviderOptions;\r\n    resetContinuationToken(): void;\r\n    getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]>;\r\n    addItem(id: string, answers: Answers, idToken?: string): Promise<void>;\r\n    getItem(id: string, idToken?: string): Promise<Answers | null>;\r\n    deleteItem(id: string, idToken?: string): Promise<void>;\r\n}\r\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\r\n\r\nexport class NoneProvider implements IHistoryProvider {\r\n    getProviderName = () => HistoryProviderOptions.None;\r\n    resetContinuationToken(): void {\r\n        return;\r\n    }\r\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\r\n        return [];\r\n    }\r\n    async addItem(id: string, answers: Answers): Promise<void> {\r\n        return;\r\n    }\r\n    async getItem(id: string): Promise<null> {\r\n        return null;\r\n    }\r\n    async deleteItem(id: string): Promise<void> {\r\n        return;\r\n    }\r\n}\r\n","import { IDBPDatabase, openDB } from \"idb\";\r\nimport { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\r\n\r\nexport class IndexedDBProvider implements IHistoryProvider {\r\n    getProviderName = () => HistoryProviderOptions.IndexedDB;\r\n\r\n    private dbName: string;\r\n    private storeName: string;\r\n    private dbPromise: Promise<IDBPDatabase> | null = null;\r\n    private cursorKey: IDBValidKey | undefined;\r\n    private isCusorEnd: boolean = false;\r\n\r\n    constructor(dbName: string, storeName: string) {\r\n        this.dbName = dbName;\r\n        this.storeName = storeName;\r\n        this.cursorKey = undefined;\r\n        this.isCusorEnd = false;\r\n    }\r\n\r\n    private async init() {\r\n        const storeName = this.storeName;\r\n        if (!this.dbPromise) {\r\n            this.dbPromise = openDB(this.dbName, 1, {\r\n                upgrade(db) {\r\n                    if (!db.objectStoreNames.contains(storeName)) {\r\n                        const store = db.createObjectStore(storeName, { keyPath: \"id\" });\r\n                        store.createIndex(\"timestamp\", \"timestamp\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return this.dbPromise;\r\n    }\r\n\r\n    resetContinuationToken() {\r\n        this.cursorKey = undefined;\r\n        this.isCusorEnd = false;\r\n    }\r\n\r\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\r\n        const db = await this.init();\r\n        const tx = db.transaction(this.storeName, \"readonly\");\r\n        const store = tx.objectStore(this.storeName);\r\n        const index = store.index(\"timestamp\");\r\n\r\n        // return empty array if cursor is already at the end\r\n        if (this.isCusorEnd) {\r\n            return [];\r\n        }\r\n\r\n        // set cursor to the last key\r\n        let cursor = this.cursorKey ? await index.openCursor(IDBKeyRange.upperBound(this.cursorKey), \"prev\") : await index.openCursor(null, \"prev\");\r\n\r\n        // return empty array means no more history or no data. set isCursorEnd to true and return empty array\r\n        if (!cursor) {\r\n            this.isCusorEnd = true;\r\n            return [];\r\n        }\r\n\r\n        const loadedItems: { id: string; title: string; timestamp: number; answers: Answers }[] = [];\r\n        for (let i = 0; i < count && cursor; i++) {\r\n            loadedItems.push(cursor.value);\r\n            cursor = await cursor.continue();\r\n        }\r\n\r\n        // set isCursorEnd to true if cursor is null\r\n        if (!cursor) {\r\n            this.isCusorEnd = true;\r\n        }\r\n\r\n        // update cursorKey\r\n        this.cursorKey = cursor?.key;\r\n\r\n        return loadedItems;\r\n    }\r\n\r\n    async addItem(id: string, answers: Answers): Promise<void> {\r\n        const timestamp = new Date().getTime();\r\n        const db = await this.init(); // 自動的に初期化\r\n        const tx = db.transaction(this.storeName, \"readwrite\");\r\n        const current = await tx.objectStore(this.storeName).get(id);\r\n        if (current) {\r\n            await tx.objectStore(this.storeName).put({ ...current, id, timestamp, answers });\r\n        } else {\r\n            const title = answers[0][0].length > 50 ? answers[0][0].substring(0, 50) + \"...\" : answers[0][0];\r\n            await tx.objectStore(this.storeName).add({ id, title, timestamp, answers });\r\n        }\r\n        await tx.done;\r\n        return;\r\n    }\r\n\r\n    async getItem(id: string): Promise<Answers | null> {\r\n        const db = await this.init();\r\n        const tx = db.transaction(this.storeName, \"readonly\");\r\n        const item = await tx.objectStore(this.storeName).get(id);\r\n        return item ? item.answers : null;\r\n    }\r\n\r\n    async deleteItem(id: string): Promise<void> {\r\n        const db = await this.init();\r\n        await db.delete(this.storeName, id);\r\n        return;\r\n    }\r\n}\r\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\r\nimport { deleteChatHistoryApi, getChatHistoryApi, getChatHistoryListApi, postChatHistoryApi } from \"../../api\";\r\n\r\nexport class CosmosDBProvider implements IHistoryProvider {\r\n    getProviderName = () => HistoryProviderOptions.CosmosDB;\r\n\r\n    private continuationToken: string | undefined;\r\n    private isItemEnd: boolean = false;\r\n\r\n    resetContinuationToken() {\r\n        this.continuationToken = undefined;\r\n        this.isItemEnd = false;\r\n    }\r\n\r\n    async getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]> {\r\n        if (this.isItemEnd) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            const response = await getChatHistoryListApi(count, this.continuationToken, idToken || \"\");\r\n            this.continuationToken = response.continuation_token;\r\n            if (!this.continuationToken) {\r\n                this.isItemEnd = true;\r\n            }\r\n            return response.sessions.map(session => ({\r\n                id: session.id,\r\n                title: session.title,\r\n                timestamp: session.timestamp\r\n            }));\r\n        } catch (e) {\r\n            console.error(e);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async addItem(id: string, answers: Answers, idToken?: string): Promise<void> {\r\n        await postChatHistoryApi({ id, answers }, idToken || \"\");\r\n        return;\r\n    }\r\n\r\n    async getItem(id: string, idToken?: string): Promise<Answers | null> {\r\n        const response = await getChatHistoryApi(id, idToken || \"\");\r\n        return response.answers || null;\r\n    }\r\n\r\n    async deleteItem(id: string, idToken?: string): Promise<void> {\r\n        await deleteChatHistoryApi(id, idToken || \"\");\r\n        return;\r\n    }\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { IHistoryProvider, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\r\nimport { NoneProvider } from \"../HistoryProviders/None\";\r\nimport { IndexedDBProvider } from \"../HistoryProviders/IndexedDB\";\r\nimport { CosmosDBProvider } from \"../HistoryProviders/CosmosDB\";\r\n\r\nexport const useHistoryManager = (provider: HistoryProviderOptions): IHistoryProvider => {\r\n    const providerInstance = useMemo(() => {\r\n        switch (provider) {\r\n            case HistoryProviderOptions.IndexedDB:\r\n                return new IndexedDBProvider(\"chat-database\", \"chat-history\");\r\n            case HistoryProviderOptions.CosmosDB:\r\n                return new CosmosDBProvider();\r\n            case HistoryProviderOptions.None:\r\n            default:\r\n                return new NoneProvider();\r\n        }\r\n    }, [provider]);\r\n\r\n    return providerInstance;\r\n};\r\n","import { useMsal } from \"@azure/msal-react\";\r\nimport { getToken, useLogin } from \"../../authConfig\";\r\nimport { Panel, PanelType, Spinner } from \"@fluentui/react\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { HistoryData, HistoryItem } from \"../HistoryItem\";\r\nimport { Answers, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\r\nimport { useHistoryManager, HistoryMetaData } from \"../HistoryProviders\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./HistoryPanel.module.css\";\r\n\r\nconst HISTORY_COUNT_PER_LOAD = 20;\r\n\r\nexport const HistoryPanel = ({\r\n    provider,\r\n    isOpen,\r\n    notify,\r\n    onClose,\r\n    onChatSelected\r\n}: {\r\n    provider: HistoryProviderOptions;\r\n    isOpen: boolean;\r\n    notify: boolean;\r\n    onClose: () => void;\r\n    onChatSelected: (answers: Answers) => void;\r\n}) => {\r\n    const historyManager = useHistoryManager(provider);\r\n    const [history, setHistory] = useState<HistoryMetaData[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hasMoreHistory, setHasMoreHistory] = useState(false);\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    useEffect(() => {\r\n        if (!isOpen) return;\r\n        if (notify) {\r\n            setHistory([]);\r\n            historyManager.resetContinuationToken();\r\n            setHasMoreHistory(true);\r\n        }\r\n    }, [isOpen, notify]);\r\n\r\n    const loadMoreHistory = async () => {\r\n        setIsLoading(() => true);\r\n        const token = client ? await getToken(client) : undefined;\r\n        const items = await historyManager.getNextItems(HISTORY_COUNT_PER_LOAD, token);\r\n        if (items.length === 0) {\r\n            setHasMoreHistory(false);\r\n        }\r\n        setHistory(prevHistory => [...prevHistory, ...items]);\r\n        setIsLoading(() => false);\r\n    };\r\n\r\n    const handleSelect = async (id: string) => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        const item = await historyManager.getItem(id, token);\r\n        if (item) {\r\n            onChatSelected(item);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id: string) => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        await historyManager.deleteItem(id, token);\r\n        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));\r\n    };\r\n\r\n    const groupedHistory = useMemo(() => groupHistory(history), [history]);\r\n\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Panel\r\n            type={PanelType.customNear}\r\n            style={{ padding: \"0px\" }}\r\n            headerText={t(\"history.chatHistory\")}\r\n            customWidth=\"300px\"\r\n            isBlocking={false}\r\n            isOpen={isOpen}\r\n            onDismiss={() => onClose()}\r\n            onDismissed={() => {\r\n                setHistory([]);\r\n                setHasMoreHistory(true);\r\n                historyManager.resetContinuationToken();\r\n            }}\r\n        >\r\n            <div>\r\n                {Object.entries(groupedHistory).map(([group, items]) => (\r\n                    <div key={group} className={styles.group}>\r\n                        <p className={styles.groupLabel}>{t(group)}</p>\r\n                        {items.map(item => (\r\n                            <HistoryItem key={item.id} item={item} onSelect={handleSelect} onDelete={handleDelete} />\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n                {isLoading && <Spinner style={{ marginTop: \"10px\" }} />}\r\n                {history.length === 0 && !isLoading && <p>{t(\"history.noHistory\")}</p>}\r\n                {hasMoreHistory && !isLoading && <InfiniteLoadingButton func={loadMoreHistory} />}\r\n            </div>\r\n        </Panel>\r\n    );\r\n};\r\n\r\nfunction groupHistory(history: HistoryData[]) {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    const lastWeek = new Date(today);\r\n    lastWeek.setDate(lastWeek.getDate() - 7);\r\n    const lastMonth = new Date(today);\r\n    lastMonth.setDate(lastMonth.getDate() - 30);\r\n\r\n    return history.reduce(\r\n        (groups, item) => {\r\n            const itemDate = new Date(item.timestamp);\r\n            let group;\r\n\r\n            if (itemDate >= today) {\r\n                group = \"history.today\";\r\n            } else if (itemDate >= yesterday) {\r\n                group = \"history.yesterday\";\r\n            } else if (itemDate >= lastWeek) {\r\n                group = \"history.last7days\";\r\n            } else if (itemDate >= lastMonth) {\r\n                group = \"history.last30days\";\r\n            } else {\r\n                group = itemDate.toLocaleDateString(undefined, { year: \"numeric\", month: \"long\" });\r\n            }\r\n\r\n            if (!groups[group]) {\r\n                groups[group] = [];\r\n            }\r\n            groups[group].push(item);\r\n            return groups;\r\n        },\r\n        {} as Record<string, HistoryData[]>\r\n    );\r\n}\r\n\r\nconst InfiniteLoadingButton = ({ func }: { func: () => void }) => {\r\n    const buttonRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(\r\n            entries => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        if (buttonRef.current) {\r\n                            func();\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            {\r\n                root: null,\r\n                threshold: 0\r\n            }\r\n        );\r\n\r\n        if (buttonRef.current) {\r\n            observer.observe(buttonRef.current);\r\n        }\r\n\r\n        return () => {\r\n            if (buttonRef.current) {\r\n                observer.unobserve(buttonRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return <button ref={buttonRef} onClick={func} />;\r\n};\r\n","import { History24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./HistoryButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const HistoryButton = ({ className, disabled, onClick }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<History24Regular />} disabled={disabled} onClick={onClick}>\r\n                {t(\"history.openChatHistory\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={onClick}>\r\n                {t(\"developerSettings\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\r\n                {t(\"clearChat\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { Callout, Label, Text } from \"@fluentui/react\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport styles from \"./UploadFile.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\r\n    // State variables to manage the component behavior\r\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\r\n    const [isUploading, setIsUploading] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\r\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\r\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\r\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\r\n    const { t } = useTranslation();\r\n\r\n    if (!useLogin) {\r\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\r\n    }\r\n\r\n    const client = useMsal().instance;\r\n\r\n    // Handler for the \"Manage file uploads\" button\r\n    const handleButtonClick = async () => {\r\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\r\n\r\n        // Update uploaded files by calling the API\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const listUploadedFiles = async (idToken: string) => {\r\n        listUploadedFilesApi(idToken).then(files => {\r\n            setIsLoading(false);\r\n            setDeletionStatus({});\r\n            setUploadedFiles(files);\r\n        });\r\n    };\r\n\r\n    const handleRemoveFile = async (filename: string) => {\r\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n\r\n            await deleteUploadedFileApi(filename, idToken);\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // Handler for the form submission (file upload)\r\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (!e.target.files || e.target.files.length === 0) {\r\n            return;\r\n        }\r\n        setIsUploading(true); // Start the loading state\r\n        const file: File = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\r\n            setUploadedFile(response);\r\n            setIsUploading(false);\r\n            setUploadedFileError(undefined);\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsUploading(false);\r\n            setUploadedFileError(t(\"upload.uploadedFileError\"));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <div>\r\n                <Button id=\"calloutButton\" icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\r\n                    {t(\"upload.manageFileUploads\")}\r\n                </Button>\r\n\r\n                {isCalloutVisible && (\r\n                    <Callout\r\n                        role=\"dialog\"\r\n                        gapSpace={0}\r\n                        className={styles.callout}\r\n                        target=\"#calloutButton\"\r\n                        onDismiss={() => setIsCalloutVisible(false)}\r\n                        setInitialFocus\r\n                    >\r\n                        <form encType=\"multipart/form-data\">\r\n                            <div>\r\n                                <Label>{t(\"upload.fileLabel\")}</Label>\r\n                                <input\r\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\r\n                                    className={styles.chooseFiles}\r\n                                    type=\"file\"\r\n                                    onChange={handleUploadFile}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n\r\n                        {/* Show a loading message while files are being uploaded */}\r\n                        {isUploading && <Text>{t(\"upload.uploadingFiles\")}</Text>}\r\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\r\n                        {!isUploading && uploadedFile && <Text>{uploadedFile.message}</Text>}\r\n\r\n                        {/* Display the list of already uploaded */}\r\n                        <h3>{t(\"upload.uploadedFilesLabel\")}</h3>\r\n\r\n                        {isLoading && <Text>{t(\"upload.loading\")}</Text>}\r\n                        {!isLoading && uploadedFiles.length === 0 && <Text>{t(\"upload.noFilesUploaded\")}</Text>}\r\n                        {uploadedFiles.map((filename, index) => {\r\n                            return (\r\n                                <div key={index} className={styles.list}>\r\n                                    <div className={styles.item}>{filename}</div>\r\n                                    {/* Button to remove a file from the list */}\r\n                                    <Button\r\n                                        icon={<Delete24Regular />}\r\n                                        onClick={() => handleRemoveFile(filename)}\r\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\r\n                                    >\r\n                                        {!deletionStatus[filename] && t(\"upload.deleteFile\")}\r\n                                        {deletionStatus[filename] == \"pending\" && t(\"upload.deletingFile\")}\r\n                                        {deletionStatus[filename] == \"error\" && t(\"upload.errorDeleting\")}\r\n                                        {deletionStatus[filename] == \"success\" && t(\"upload.fileDeleted\")}\r\n                                    </Button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </Callout>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { Label } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport {\r\n    DataGridBody,\r\n    DataGridRow,\r\n    DataGrid,\r\n    DataGridHeader,\r\n    DataGridHeaderCell,\r\n    DataGridCell,\r\n    createTableColumn,\r\n    TableColumnDefinition\r\n} from \"@fluentui/react-table\";\r\nimport { getTokenClaims } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ntype Claim = {\r\n    name: string;\r\n    value: string;\r\n};\r\n\r\nexport const TokenClaimsDisplay = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const fetchClaims = async () => {\r\n            setClaims(await getTokenClaims(instance));\r\n        };\r\n\r\n        fetchClaims();\r\n    }, []);\r\n\r\n    const ToString = (a: string | any) => {\r\n        if (typeof a === \"string\") {\r\n            return a;\r\n        } else {\r\n            return JSON.stringify(a);\r\n        }\r\n    };\r\n\r\n    let createClaims = (o: Record<string, unknown> | undefined) => {\r\n        return Object.keys(o ?? {}).map((key: string) => {\r\n            let originalKey = key;\r\n            try {\r\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\r\n                const url = new URL(key);\r\n                const parts = url.pathname.split(\"/\");\r\n                key = parts[parts.length - 1];\r\n            } catch (error) {\r\n                // Do not parse key if it's not a URL\r\n            }\r\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\r\n        });\r\n    };\r\n    const items: Claim[] = createClaims(claims);\r\n\r\n    const columns: TableColumnDefinition<Claim>[] = [\r\n        createTableColumn<Claim>({\r\n            columnId: \"name\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.name.localeCompare(b.name);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Name\";\r\n            },\r\n            renderCell: item => {\r\n                return item.name;\r\n            }\r\n        }),\r\n        createTableColumn<Claim>({\r\n            columnId: \"value\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.value.localeCompare(b.value);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Value\";\r\n            },\r\n            renderCell: item => {\r\n                return item.value;\r\n            }\r\n        })\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Label>ID Token Claims</Label>\r\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\r\n                <DataGridHeader>\r\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<Claim>>\r\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { LocalLanguage24Regular } from \"@fluentui/react-icons\";\r\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\n\r\nimport { supportedLngs } from \"./config\";\r\nimport styles from \"./LanguagePicker.module.css\";\r\n\r\ninterface Props {\r\n    onLanguageChange: (language: string) => void;\r\n}\r\n\r\nexport const LanguagePicker = ({ onLanguageChange }: Props) => {\r\n    const { i18n } = useTranslation();\r\n\r\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\r\n        onLanguageChange(option?.data || i18n.language);\r\n    };\r\n    const languagePickerId = useId(\"languagePicker\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <div className={styles.languagePicker}>\r\n            <LocalLanguage24Regular className={styles.languagePickerIcon} />\r\n            <Dropdown\r\n                id={languagePickerId}\r\n                selectedKey={i18n.language}\r\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\r\n                    key: code,\r\n                    text: details.name,\r\n                    selected: code === i18n.language,\r\n                    data: code\r\n                }))}\r\n                onChange={handleLanguageChange}\r\n                ariaLabel={t(\"labels.languagePicker\")}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\r\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst stackTokens: IStackTokens = {\r\n    childrenGap: 4,\r\n    maxWidth: 300\r\n};\r\n\r\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\r\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\r\nconst iconProps = { iconName: \"Info\" };\r\n\r\ninterface IHelpCalloutProps {\r\n    label: string | undefined;\r\n    labelId: string;\r\n    fieldId: string | undefined;\r\n    helpText: string;\r\n}\r\n\r\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\r\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\r\n    const descriptionId: string = useId(\"description\");\r\n    const iconButtonId: string = useId(\"iconButton\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <>\r\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\r\n                <label id={props.labelId} htmlFor={props.fieldId}>\r\n                    {props.label}\r\n                </label>\r\n                <IconButton\r\n                    id={iconButtonId}\r\n                    iconProps={iconProps}\r\n                    title={t(\"tooltips.info\")}\r\n                    ariaLabel={t(\"tooltips.info\")}\r\n                    onClick={toggleIsCalloutVisible}\r\n                    styles={iconButtonStyles}\r\n                />\r\n            </Stack>\r\n            {isCalloutVisible && (\r\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\r\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\r\n                        <span id={descriptionId}>{props.helpText}</span>\r\n                        <DefaultButton onClick={toggleIsCalloutVisible}>{t(\"labels.closeButton\")}</DefaultButton>\r\n                    </Stack>\r\n                </Callout>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./GPT4VSettings.module.css\";\r\nimport { GPT4VInput } from \"../../api\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\n\r\ninterface Props {\r\n    gpt4vInputs: GPT4VInput;\r\n    isUseGPT4V: boolean;\r\n    updateGPT4VInputs: (input: GPT4VInput) => void;\r\n    updateUseGPT4V: (useGPT4V: boolean) => void;\r\n}\r\n\r\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\r\n\r\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        updateUseGPT4V(!!checked);\r\n        setUseGPT4V(!!checked);\r\n    };\r\n\r\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\r\n        if (option) {\r\n            const data = option.key as GPT4VInput;\r\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\r\n            data && setVectorFieldOption(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\r\n    }, [useGPT4V]);\r\n\r\n    const useGPT4VId = useId(\"useGPT4V\");\r\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\r\n    const gpt4VInputId = useId(\"gpt4VInput\");\r\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Checkbox\r\n                id={useGPT4VFieldId}\r\n                checked={useGPT4V}\r\n                label={t(\"labels.useGPT4V\")}\r\n                onChange={onuseGPT4V}\r\n                aria-labelledby={useGPT4VId}\r\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={t(\"helpTexts.useGPT4Vision\")} label={props?.label} />\r\n                )}\r\n            />\r\n            {useGPT4V && (\r\n                <Dropdown\r\n                    id={gpt4VInputFieldId}\r\n                    selectedKey={vectorFieldOption}\r\n                    label={t(\"labels.gpt4VInput.label\")}\r\n                    options={[\r\n                        {\r\n                            key: GPT4VInput.TextAndImages,\r\n                            text: t(\"labels.gpt4VInput.options.textAndImages\")\r\n                        },\r\n                        { text: t(\"labels.gpt4VInput.options.images\"), key: GPT4VInput.Images },\r\n                        { text: t(\"labels.gpt4VInput.options.texts\"), key: GPT4VInput.Texts }\r\n                    ]}\r\n                    required\r\n                    onChange={onSetGPT4VInput}\r\n                    aria-labelledby={gpt4VInputId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={t(\"helpTexts.gpt4VisionInputs\")} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./VectorSettings.module.css\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { RetrievalMode, VectorFields } from \"../../api\";\r\n\r\ninterface Props {\r\n    showImageOptions?: boolean;\r\n    defaultRetrievalMode: RetrievalMode;\r\n    defaultVectorFields?: VectorFields;\r\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\r\n    updateVectorFields: (vectorFields: VectorFields) => void;\r\n}\r\n\r\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode, defaultVectorFields }: Props) => {\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(defaultRetrievalMode || RetrievalMode.Hybrid);\r\n    const [vectorFields, setVectorFields] = useState<VectorFields>(defaultVectorFields || VectorFields.TextAndImageEmbeddings);\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<VectorFields> | undefined) => {\r\n        setVectorFields(option?.data || VectorFields.TextAndImageEmbeddings);\r\n        updateVectorFields(option?.data || VectorFields.TextAndImageEmbeddings);\r\n    };\r\n\r\n    // Only run if showImageOptions changes from true to false or false to true\r\n    useEffect(() => {\r\n        if (!showImageOptions) {\r\n            // If images are disabled, we must force to text-only embeddings\r\n            setVectorFields(VectorFields.Embedding);\r\n            updateVectorFields(VectorFields.Embedding);\r\n        } else {\r\n            // When image options become available, reset to default or use TextAndImageEmbeddings\r\n            setVectorFields(defaultVectorFields || VectorFields.TextAndImageEmbeddings);\r\n            updateVectorFields(defaultVectorFields || VectorFields.TextAndImageEmbeddings);\r\n        }\r\n    }, [showImageOptions, updateVectorFields, defaultVectorFields]);\r\n\r\n    const retrievalModeId = useId(\"retrievalMode\");\r\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\r\n    const vectorFieldsId = useId(\"vectorFields\");\r\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Dropdown\r\n                id={retrievalModeFieldId}\r\n                label={t(\"labels.retrievalMode.label\")}\r\n                selectedKey={retrievalMode.toString()}\r\n                options={[\r\n                    {\r\n                        key: \"hybrid\",\r\n                        text: t(\"labels.retrievalMode.options.hybrid\"),\r\n                        selected: retrievalMode == RetrievalMode.Hybrid,\r\n                        data: RetrievalMode.Hybrid\r\n                    },\r\n                    {\r\n                        key: \"vectors\",\r\n                        text: t(\"labels.retrievalMode.options.vectors\"),\r\n                        selected: retrievalMode == RetrievalMode.Vectors,\r\n                        data: RetrievalMode.Vectors\r\n                    },\r\n                    { key: \"text\", text: t(\"labels.retrievalMode.options.texts\"), selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                ]}\r\n                required\r\n                onChange={onRetrievalModeChange}\r\n                aria-labelledby={retrievalModeId}\r\n                onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={t(\"helpTexts.retrievalMode\")} label={props?.label} />\r\n                )}\r\n            />\r\n\r\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\r\n                <Dropdown\r\n                    id={vectorFieldsFieldId}\r\n                    label={t(\"labels.vector.label\")}\r\n                    selectedKey={vectorFields}\r\n                    options={[\r\n                        {\r\n                            key: VectorFields.Embedding,\r\n                            text: t(\"labels.vector.options.embedding\"),\r\n                            selected: vectorFields === VectorFields.Embedding,\r\n                            data: VectorFields.Embedding\r\n                        },\r\n                        {\r\n                            key: VectorFields.ImageEmbedding,\r\n                            text: t(\"labels.vector.options.imageEmbedding\"),\r\n                            selected: vectorFields === VectorFields.ImageEmbedding,\r\n                            data: VectorFields.ImageEmbedding\r\n                        },\r\n                        {\r\n                            key: VectorFields.TextAndImageEmbeddings,\r\n                            text: t(\"labels.vector.options.both\"),\r\n                            selected: vectorFields === VectorFields.TextAndImageEmbeddings,\r\n                            data: VectorFields.TextAndImageEmbeddings\r\n                        }\r\n                    ]}\r\n                    onChange={onVectorFieldsChange}\r\n                    aria-labelledby={vectorFieldsId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={t(\"helpTexts.vectorFields\")} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TextField, ITextFieldProps, Checkbox, ICheckboxProps, Dropdown, IDropdownProps, IDropdownOption } from \"@fluentui/react\";\r\nimport { HelpCallout } from \"../HelpCallout\";\r\nimport { GPT4VSettings } from \"../GPT4VSettings\";\r\nimport { VectorSettings } from \"../VectorSettings\";\r\nimport { RetrievalMode, VectorFields, GPT4VInput } from \"../../api\";\r\nimport styles from \"./Settings.module.css\";\r\n\r\n// Add type for onRenderLabel\r\ntype RenderLabelType = ITextFieldProps | IDropdownProps | ICheckboxProps;\r\n\r\nexport interface SettingsProps {\r\n    promptTemplate: string;\r\n    temperature: number;\r\n    retrieveCount: number;\r\n    maxSubqueryCount: number;\r\n    resultsMergeStrategy: string;\r\n    seed: number | null;\r\n    minimumSearchScore: number;\r\n    minimumRerankerScore: number;\r\n    useSemanticRanker: boolean;\r\n    useSemanticCaptions: boolean;\r\n    useQueryRewriting: boolean;\r\n    reasoningEffort: string;\r\n    excludeCategory: string;\r\n    includeCategory: string;\r\n    retrievalMode: RetrievalMode;\r\n    useGPT4V: boolean;\r\n    gpt4vInput: GPT4VInput;\r\n    vectorFields: VectorFields;\r\n    showSemanticRankerOption: boolean;\r\n    showQueryRewritingOption: boolean;\r\n    showReasoningEffortOption: boolean;\r\n    showGPT4VOptions: boolean;\r\n    showVectorOption: boolean;\r\n    useOidSecurityFilter: boolean;\r\n    useGroupsSecurityFilter: boolean;\r\n    useLogin: boolean;\r\n    loggedIn: boolean;\r\n    requireAccessControl: boolean;\r\n    className?: string;\r\n    onChange: (field: string, value: any) => void;\r\n    streamingEnabled?: boolean; // Only used in chat\r\n    shouldStream?: boolean; // Only used in Chat\r\n    useSuggestFollowupQuestions?: boolean; // Only used in Chat\r\n    promptTemplatePrefix?: string;\r\n    promptTemplateSuffix?: string;\r\n    showSuggestFollowupQuestions?: boolean;\r\n    showAgenticRetrievalOption: boolean;\r\n    useAgenticRetrieval: boolean;\r\n}\r\n\r\nexport const Settings = ({\r\n    promptTemplate,\r\n    temperature,\r\n    retrieveCount,\r\n    maxSubqueryCount,\r\n    resultsMergeStrategy,\r\n    seed,\r\n    minimumSearchScore,\r\n    minimumRerankerScore,\r\n    useSemanticRanker,\r\n    useSemanticCaptions,\r\n    useQueryRewriting,\r\n    reasoningEffort,\r\n    excludeCategory,\r\n    includeCategory,\r\n    retrievalMode,\r\n    useGPT4V,\r\n    gpt4vInput,\r\n    vectorFields,\r\n    showSemanticRankerOption,\r\n    showQueryRewritingOption,\r\n    showReasoningEffortOption,\r\n    showGPT4VOptions,\r\n    showVectorOption,\r\n    useOidSecurityFilter,\r\n    useGroupsSecurityFilter,\r\n    useLogin,\r\n    loggedIn,\r\n    requireAccessControl,\r\n    className,\r\n    onChange,\r\n    streamingEnabled,\r\n    shouldStream,\r\n    useSuggestFollowupQuestions,\r\n    promptTemplatePrefix,\r\n    promptTemplateSuffix,\r\n    showSuggestFollowupQuestions,\r\n    showAgenticRetrievalOption,\r\n    useAgenticRetrieval\r\n}: SettingsProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    // Form field IDs\r\n    const promptTemplateId = useId(\"promptTemplate\");\r\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\r\n    const temperatureId = useId(\"temperature\");\r\n    const temperatureFieldId = useId(\"temperatureField\");\r\n    const seedId = useId(\"seed\");\r\n    const seedFieldId = useId(\"seedField\");\r\n    const agenticRetrievalId = useId(\"agenticRetrieval\");\r\n    const agenticRetrievalFieldId = useId(\"agenticRetrievalField\");\r\n    const searchScoreId = useId(\"searchScore\");\r\n    const searchScoreFieldId = useId(\"searchScoreField\");\r\n    const rerankerScoreId = useId(\"rerankerScore\");\r\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\r\n    const retrieveCountId = useId(\"retrieveCount\");\r\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\r\n    const maxSubqueryCountId = useId(\"maxSubqueryCount\");\r\n    const maxSubqueryCountFieldId = useId(\"maxSubqueryCountField\");\r\n    const resultsMergeStrategyFieldId = useId(\"resultsMergeStrategy\");\r\n    const includeCategoryId = useId(\"includeCategory\");\r\n    const includeCategoryFieldId = useId(\"includeCategoryField\");\r\n    const excludeCategoryId = useId(\"excludeCategory\");\r\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\r\n    const semanticRankerId = useId(\"semanticRanker\");\r\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\r\n    const queryRewritingFieldId = useId(\"queryRewritingField\");\r\n    const reasoningEffortFieldId = useId(\"reasoningEffortField\");\r\n    const semanticCaptionsId = useId(\"semanticCaptions\");\r\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\r\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\r\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\r\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\r\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\r\n    const shouldStreamId = useId(\"shouldStream\");\r\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\r\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\r\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\r\n\r\n    const renderLabel = (props: RenderLabelType | undefined, labelId: string, fieldId: string, helpText: string) => (\r\n        <HelpCallout labelId={labelId} fieldId={fieldId} helpText={helpText} label={props?.label} />\r\n    );\r\n\r\n    return (\r\n        <div className={className}>\r\n            <TextField\r\n                id={promptTemplateFieldId}\r\n                className={styles.settingsSeparator}\r\n                defaultValue={promptTemplate}\r\n                label={t(\"labels.promptTemplate\")}\r\n                multiline\r\n                autoAdjustHeight\r\n                onChange={(_ev, val) => onChange(\"promptTemplate\", val || \"\")}\r\n                aria-labelledby={promptTemplateId}\r\n                onRenderLabel={props => renderLabel(props, promptTemplateId, promptTemplateFieldId, t(\"helpTexts.promptTemplate\"))}\r\n            />\r\n\r\n            <TextField\r\n                id={temperatureFieldId}\r\n                className={styles.settingsSeparator}\r\n                label={t(\"labels.temperature\")}\r\n                type=\"number\"\r\n                min={0}\r\n                max={1}\r\n                step={0.1}\r\n                defaultValue={temperature.toString()}\r\n                onChange={(_ev, val) => onChange(\"temperature\", parseFloat(val || \"0\"))}\r\n                aria-labelledby={temperatureId}\r\n                onRenderLabel={props => renderLabel(props, temperatureId, temperatureFieldId, t(\"helpTexts.temperature\"))}\r\n            />\r\n\r\n            <TextField\r\n                id={seedFieldId}\r\n                className={styles.settingsSeparator}\r\n                label={t(\"labels.seed\")}\r\n                type=\"text\"\r\n                defaultValue={seed?.toString() || \"\"}\r\n                onChange={(_ev, val) => onChange(\"seed\", val ? parseInt(val) : null)}\r\n                aria-labelledby={seedId}\r\n                onRenderLabel={props => renderLabel(props, seedId, seedFieldId, t(\"helpTexts.seed\"))}\r\n            />\r\n\r\n            {showAgenticRetrievalOption && (\r\n                <Checkbox\r\n                    id={agenticRetrievalFieldId}\r\n                    className={styles.settingsSeparator}\r\n                    checked={useAgenticRetrieval}\r\n                    label={t(\"labels.useAgenticRetrieval\")}\r\n                    onChange={(_ev, checked) => onChange(\"useAgenticRetrieval\", !!checked)}\r\n                    aria-labelledby={agenticRetrievalId}\r\n                    onRenderLabel={props => renderLabel(props, agenticRetrievalId, agenticRetrievalFieldId, t(\"helpTexts.suggestFollowupQuestions\"))}\r\n                />\r\n            )}\r\n            {!useAgenticRetrieval && !useGPT4V && (\r\n                <TextField\r\n                    id={searchScoreFieldId}\r\n                    className={styles.settingsSeparator}\r\n                    label={t(\"labels.minimumSearchScore\")}\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    defaultValue={minimumSearchScore.toString()}\r\n                    onChange={(_ev, val) => onChange(\"minimumSearchScore\", parseFloat(val || \"0\"))}\r\n                    aria-labelledby={searchScoreId}\r\n                    onRenderLabel={props => renderLabel(props, searchScoreId, searchScoreFieldId, t(\"helpTexts.searchScore\"))}\r\n                />\r\n            )}\r\n\r\n            {showSemanticRankerOption && (\r\n                <TextField\r\n                    id={rerankerScoreFieldId}\r\n                    className={styles.settingsSeparator}\r\n                    label={t(\"labels.minimumRerankerScore\")}\r\n                    type=\"number\"\r\n                    min={1}\r\n                    max={4}\r\n                    step={0.1}\r\n                    defaultValue={minimumRerankerScore.toString()}\r\n                    onChange={(_ev, val) => onChange(\"minimumRerankerScore\", parseFloat(val || \"0\"))}\r\n                    aria-labelledby={rerankerScoreId}\r\n                    onRenderLabel={props => renderLabel(props, rerankerScoreId, rerankerScoreFieldId, t(\"helpTexts.rerankerScore\"))}\r\n                />\r\n            )}\r\n\r\n            {showAgenticRetrievalOption && useAgenticRetrieval && (\r\n                <TextField\r\n                    id={maxSubqueryCountFieldId}\r\n                    className={styles.settingsSeparator}\r\n                    label={t(\"labels.maxSubqueryCount\")}\r\n                    type=\"number\"\r\n                    min={2}\r\n                    max={40}\r\n                    defaultValue={maxSubqueryCount.toString()}\r\n                    onChange={(_ev, val) => onChange(\"maxSubqueryCount\", parseInt(val || \"10\"))}\r\n                    aria-labelledby={maxSubqueryCountId}\r\n                    onRenderLabel={props => renderLabel(props, maxSubqueryCountId, maxSubqueryCountFieldId, t(\"helpTexts.maxSubqueryCount\"))}\r\n                />\r\n            )}\r\n\r\n            {showAgenticRetrievalOption && useAgenticRetrieval && (\r\n                <Dropdown\r\n                    id={resultsMergeStrategyFieldId}\r\n                    className={styles.settingsSeparator}\r\n                    label={t(\"labels.resultsMergeStrategy\")}\r\n                    selectedKey={resultsMergeStrategy}\r\n                    onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IDropdownOption) =>\r\n                        onChange(\"resultsMergeStrategy\", option?.key)\r\n                    }\r\n                    aria-labelledby={includeCategoryId}\r\n                    options={[\r\n                        { key: \"interleaved\", text: t(\"labels.resultsMergeStrategyOptions.interleaved\") },\r\n                        { key: \"descending\", text: t(\"labels.resultsMergeStrategyOptions.descending\") }\r\n                    ]}\r\n                    onRenderLabel={props => renderLabel(props, includeCategoryId, includeCategoryFieldId, t(\"helpTexts.resultsMergeStrategy\"))}\r\n                />\r\n            )}\r\n\r\n            <TextField\r\n                id={retrieveCountFieldId}\r\n                className={styles.settingsSeparator}\r\n                label={t(\"labels.retrieveCount\")}\r\n                type=\"number\"\r\n                min={1}\r\n                max={50}\r\n                defaultValue={retrieveCount.toString()}\r\n                onChange={(_ev, val) => onChange(\"retrieveCount\", parseInt(val || \"3\"))}\r\n                aria-labelledby={retrieveCountId}\r\n                onRenderLabel={props => renderLabel(props, retrieveCountId, retrieveCountFieldId, t(\"helpTexts.retrieveNumber\"))}\r\n            />\r\n\r\n            <Dropdown\r\n                id={includeCategoryFieldId}\r\n                className={styles.settingsSeparator}\r\n                label={t(\"labels.includeCategory\")}\r\n                selectedKey={includeCategory}\r\n                onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IDropdownOption) => onChange(\"includeCategory\", option?.key || \"\")}\r\n                aria-labelledby={includeCategoryId}\r\n                options={[\r\n                    { key: \"\", text: t(\"labels.includeCategoryOptions.all\") }\r\n                    // { key: \"example\", text: \"Example Category\" } // Add more categories as needed\r\n                ]}\r\n                onRenderLabel={props => renderLabel(props, includeCategoryId, includeCategoryFieldId, t(\"helpTexts.includeCategory\"))}\r\n            />\r\n\r\n            <TextField\r\n                id={excludeCategoryFieldId}\r\n                className={styles.settingsSeparator}\r\n                label={t(\"labels.excludeCategory\")}\r\n                defaultValue={excludeCategory}\r\n                onChange={(_ev, val) => onChange(\"excludeCategory\", val || \"\")}\r\n                aria-labelledby={excludeCategoryId}\r\n                onRenderLabel={props => renderLabel(props, excludeCategoryId, excludeCategoryFieldId, t(\"helpTexts.excludeCategory\"))}\r\n            />\r\n\r\n            {showSemanticRankerOption && !useAgenticRetrieval && (\r\n                <>\r\n                    <Checkbox\r\n                        id={semanticRankerFieldId}\r\n                        className={styles.settingsSeparator}\r\n                        checked={useSemanticRanker}\r\n                        label={t(\"labels.useSemanticRanker\")}\r\n                        onChange={(_ev, checked) => onChange(\"useSemanticRanker\", !!checked)}\r\n                        aria-labelledby={semanticRankerId}\r\n                        onRenderLabel={props => renderLabel(props, semanticRankerId, semanticRankerFieldId, t(\"helpTexts.useSemanticReranker\"))}\r\n                    />\r\n\r\n                    <Checkbox\r\n                        id={semanticCaptionsFieldId}\r\n                        className={styles.settingsSeparator}\r\n                        checked={useSemanticCaptions}\r\n                        label={t(\"labels.useSemanticCaptions\")}\r\n                        onChange={(_ev, checked) => onChange(\"useSemanticCaptions\", !!checked)}\r\n                        disabled={!useSemanticRanker}\r\n                        aria-labelledby={semanticCaptionsId}\r\n                        onRenderLabel={props => renderLabel(props, semanticCaptionsId, semanticCaptionsFieldId, t(\"helpTexts.useSemanticCaptions\"))}\r\n                    />\r\n                </>\r\n            )}\r\n\r\n            {showQueryRewritingOption && !useAgenticRetrieval && (\r\n                <>\r\n                    <Checkbox\r\n                        id={queryRewritingFieldId}\r\n                        className={styles.settingsSeparator}\r\n                        checked={useQueryRewriting}\r\n                        disabled={!useSemanticRanker}\r\n                        label={t(\"labels.useQueryRewriting\")}\r\n                        onChange={(_ev, checked) => onChange(\"useQueryRewriting\", !!checked)}\r\n                        aria-labelledby={queryRewritingFieldId}\r\n                        onRenderLabel={props => renderLabel(props, queryRewritingFieldId, queryRewritingFieldId, t(\"helpTexts.useQueryRewriting\"))}\r\n                    />\r\n                </>\r\n            )}\r\n\r\n            {showReasoningEffortOption && (\r\n                <Dropdown\r\n                    id={reasoningEffortFieldId}\r\n                    selectedKey={reasoningEffort}\r\n                    label={t(\"labels.reasoningEffort\")}\r\n                    onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IDropdownOption) =>\r\n                        onChange(\"reasoningEffort\", option?.key || \"\")\r\n                    }\r\n                    aria-labelledby={reasoningEffortFieldId}\r\n                    options={[\r\n                        { key: \"minimal\", text: t(\"labels.reasoningEffortOptions.minimal\") },\r\n                        { key: \"low\", text: t(\"labels.reasoningEffortOptions.low\") },\r\n                        { key: \"medium\", text: t(\"labels.reasoningEffortOptions.medium\") },\r\n                        { key: \"high\", text: t(\"labels.reasoningEffortOptions.high\") }\r\n                    ]}\r\n                    onRenderLabel={props => renderLabel(props, queryRewritingFieldId, queryRewritingFieldId, t(\"helpTexts.reasoningEffort\"))}\r\n                />\r\n            )}\r\n\r\n            {useLogin && (\r\n                <>\r\n                    <Checkbox\r\n                        id={useOidSecurityFilterFieldId}\r\n                        className={styles.settingsSeparator}\r\n                        checked={useOidSecurityFilter || requireAccessControl}\r\n                        label={t(\"labels.useOidSecurityFilter\")}\r\n                        disabled={!loggedIn || requireAccessControl}\r\n                        onChange={(_ev, checked) => onChange(\"useOidSecurityFilter\", !!checked)}\r\n                        aria-labelledby={useOidSecurityFilterId}\r\n                        onRenderLabel={props => renderLabel(props, useOidSecurityFilterId, useOidSecurityFilterFieldId, t(\"helpTexts.useOidSecurityFilter\"))}\r\n                    />\r\n                    <Checkbox\r\n                        id={useGroupsSecurityFilterFieldId}\r\n                        className={styles.settingsSeparator}\r\n                        checked={useGroupsSecurityFilter || requireAccessControl}\r\n                        label={t(\"labels.useGroupsSecurityFilter\")}\r\n                        disabled={!loggedIn || requireAccessControl}\r\n                        onChange={(_ev, checked) => onChange(\"useGroupsSecurityFilter\", !!checked)}\r\n                        aria-labelledby={useGroupsSecurityFilterId}\r\n                        onRenderLabel={props =>\r\n                            renderLabel(props, useGroupsSecurityFilterId, useGroupsSecurityFilterFieldId, t(\"helpTexts.useGroupsSecurityFilter\"))\r\n                        }\r\n                    />\r\n                </>\r\n            )}\r\n\r\n            {showGPT4VOptions && !useAgenticRetrieval && (\r\n                <GPT4VSettings\r\n                    gpt4vInputs={gpt4vInput}\r\n                    isUseGPT4V={useGPT4V}\r\n                    updateUseGPT4V={val => onChange(\"useGPT4V\", val)}\r\n                    updateGPT4VInputs={val => onChange(\"gpt4vInput\", val)}\r\n                />\r\n            )}\r\n\r\n            {showVectorOption && !useAgenticRetrieval && (\r\n                <VectorSettings\r\n                    defaultRetrievalMode={retrievalMode}\r\n                    defaultVectorFields={vectorFields}\r\n                    showImageOptions={useGPT4V && showGPT4VOptions}\r\n                    updateVectorFields={val => onChange(\"vectorFields\", val)}\r\n                    updateRetrievalMode={val => onChange(\"retrievalMode\", val)}\r\n                />\r\n            )}\r\n\r\n            {/* Streaming checkbox for Chat */}\r\n            {shouldStream !== undefined && (\r\n                <Checkbox\r\n                    id={shouldStreamFieldId}\r\n                    disabled={!streamingEnabled}\r\n                    className={styles.settingsSeparator}\r\n                    checked={shouldStream}\r\n                    label={t(\"labels.shouldStream\")}\r\n                    onChange={(_ev, checked) => onChange(\"shouldStream\", !!checked)}\r\n                    aria-labelledby={shouldStreamId}\r\n                    onRenderLabel={props => renderLabel(props, shouldStreamId, shouldStreamFieldId, t(\"helpTexts.streamChat\"))}\r\n                />\r\n            )}\r\n\r\n            {/* Followup questions checkbox for Chat */}\r\n            {showSuggestFollowupQuestions && (\r\n                <Checkbox\r\n                    id={suggestFollowupQuestionsFieldId}\r\n                    className={styles.settingsSeparator}\r\n                    checked={useSuggestFollowupQuestions}\r\n                    label={t(\"labels.useSuggestFollowupQuestions\")}\r\n                    onChange={(_ev, checked) => onChange(\"useSuggestFollowupQuestions\", !!checked)}\r\n                    aria-labelledby={suggestFollowupQuestionsId}\r\n                    onRenderLabel={props =>\r\n                        renderLabel(props, suggestFollowupQuestionsId, suggestFollowupQuestionsFieldId, t(\"helpTexts.suggestFollowupQuestions\"))\r\n                    }\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Panel, DefaultButton } from \"@fluentui/react\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport appLogo from \"../../assets/applogo.svg\";\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport {\r\n    chatApi,\r\n    configApi,\r\n    RetrievalMode,\r\n    ChatAppResponse,\r\n    ChatAppResponseOrError,\r\n    ChatAppRequest,\r\n    ResponseMessage,\r\n    VectorFields,\r\n    GPT4VInput,\r\n    SpeechConfig\r\n} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { HistoryPanel } from \"../../components/HistoryPanel\";\r\nimport { HistoryProviderOptions, useHistoryManager } from \"../../components/HistoryProviders\";\r\nimport { HistoryButton } from \"../../components/HistoryButton\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\r\nimport { Settings } from \"../../components/Settings/Settings\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [seed, setSeed] = useState<number | null>(null);\r\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\r\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [maxSubqueryCount, setMaxSubqueryCount] = useState<number>(10);\r\n    const [resultsMergeStrategy, setResultsMergeStrategy] = useState<string>(\"interleaved\");\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useQueryRewriting, setUseQueryRewriting] = useState<boolean>(false);\r\n    const [reasoningEffort, setReasoningEffort] = useState<string>(\"\");\r\n    const [streamingEnabled, setStreamingEnabled] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n    const [vectorFields, setVectorFields] = useState<VectorFields>(VectorFields.TextAndImageEmbeddings);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\r\n\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showQueryRewritingOption, setShowQueryRewritingOption] = useState<boolean>(false);\r\n    const [showReasoningEffortOption, setShowReasoningEffortOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\r\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\r\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\r\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\r\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\r\n    const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\r\n    const [showChatHistoryCosmos, setShowChatHistoryCosmos] = useState<boolean>(false);\r\n    const [showAgenticRetrievalOption, setShowAgenticRetrievalOption] = useState<boolean>(false);\r\n    const [useAgenticRetrieval, setUseAgenticRetrieval] = useState<boolean>(false);\r\n\r\n    const audio = useRef(new Audio()).current;\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    const speechConfig: SpeechConfig = {\r\n        speechUrls,\r\n        setSpeechUrls,\r\n        audio,\r\n        isPlaying,\r\n        setIsPlaying\r\n    };\r\n\r\n    const getConfig = async () => {\r\n        configApi().then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            if (config.showGPT4VOptions) {\r\n                setUseGPT4V(true);\r\n            }\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setUseQueryRewriting(config.showQueryRewritingOption);\r\n            setShowQueryRewritingOption(config.showQueryRewritingOption);\r\n            setShowReasoningEffortOption(config.showReasoningEffortOption);\r\n            setStreamingEnabled(config.streamingEnabled);\r\n            if (!config.streamingEnabled) {\r\n                setShouldStream(false);\r\n            }\r\n            if (config.showReasoningEffortOption) {\r\n                setReasoningEffort(config.defaultReasoningEffort);\r\n            }\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n            setShowUserUpload(config.showUserUpload);\r\n            setshowLanguagePicker(config.showLanguagePicker);\r\n            setShowSpeechInput(config.showSpeechInput);\r\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\r\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\r\n            setShowChatHistoryBrowser(config.showChatHistoryBrowser);\r\n            setShowChatHistoryCosmos(config.showChatHistoryCosmos);\r\n            setShowAgenticRetrievalOption(config.showAgenticRetrievalOption);\r\n            setUseAgenticRetrieval(config.showAgenticRetrievalOption);\r\n            if (config.showAgenticRetrievalOption) {\r\n                setRetrieveCount(10);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        message: { content: answer, role: askResponse.message.role }\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\r\n                    event[\"message\"] = event[\"delta\"];\r\n                    askResponse = event as ChatAppResponse;\r\n                } else if (event[\"delta\"] && event[\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    await updateState(event[\"delta\"][\"content\"]);\r\n                } else if (event[\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            message: { content: answer, role: askResponse.message.role }\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    const historyProvider: HistoryProviderOptions = (() => {\r\n        if (useLogin && showChatHistoryCosmos) return HistoryProviderOptions.CosmosDB;\r\n        if (showChatHistoryBrowser) return HistoryProviderOptions.IndexedDB;\r\n        return HistoryProviderOptions.None;\r\n    })();\r\n    const historyManager = useHistoryManager(historyProvider);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        include_category: includeCategory.length === 0 ? undefined : includeCategory,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        max_subqueries: maxSubqueryCount,\r\n                        results_merge_strategy: resultsMergeStrategy,\r\n                        temperature: temperature,\r\n                        minimum_reranker_score: minimumRerankerScore,\r\n                        minimum_search_score: minimumSearchScore,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        query_rewriting: useQueryRewriting,\r\n                        reasoning_effort: reasoningEffort,\r\n                        suggest_followup_questions: useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFields,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput,\r\n                        language: i18n.language,\r\n                        use_agentic_retrieval: useAgenticRetrieval,\r\n                        ...(seed !== null ? { seed: seed } : {})\r\n                    }\r\n                },\r\n                // AI Chat Protocol: Client must pass on any session state received from the server\r\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\r\n            };\r\n\r\n            const response = await chatApi(request, shouldStream, token);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (response.status > 299 || !response.ok) {\r\n                throw Error(`Request failed with status ${response.status}`);\r\n            }\r\n            if (shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\r\n                    const token = client ? await getToken(client) : undefined;\r\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse]], token);\r\n                }\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (parsedResponse.error) {\r\n                    throw Error(parsedResponse.error);\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\r\n                    const token = client ? await getToken(client) : undefined;\r\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse as ChatAppResponse]], token);\r\n                }\r\n            }\r\n            setSpeechUrls([...speechUrls, null]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setSpeechUrls([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const handleSettingsChange = (field: string, value: any) => {\r\n        switch (field) {\r\n            case \"promptTemplate\":\r\n                setPromptTemplate(value);\r\n                break;\r\n            case \"temperature\":\r\n                setTemperature(value);\r\n                break;\r\n            case \"seed\":\r\n                setSeed(value);\r\n                break;\r\n            case \"minimumRerankerScore\":\r\n                setMinimumRerankerScore(value);\r\n                break;\r\n            case \"minimumSearchScore\":\r\n                setMinimumSearchScore(value);\r\n                break;\r\n            case \"retrieveCount\":\r\n                setRetrieveCount(value);\r\n                break;\r\n            case \"maxSubqueryCount\":\r\n                setMaxSubqueryCount(value);\r\n                break;\r\n            case \"resultsMergeStrategy\":\r\n                setResultsMergeStrategy(value);\r\n                break;\r\n            case \"useSemanticRanker\":\r\n                setUseSemanticRanker(value);\r\n                break;\r\n            case \"useQueryRewriting\":\r\n                setUseQueryRewriting(value);\r\n                break;\r\n            case \"reasoningEffort\":\r\n                setReasoningEffort(value);\r\n                break;\r\n            case \"useSemanticCaptions\":\r\n                setUseSemanticCaptions(value);\r\n                break;\r\n            case \"excludeCategory\":\r\n                setExcludeCategory(value);\r\n                break;\r\n            case \"includeCategory\":\r\n                setIncludeCategory(value);\r\n                break;\r\n            case \"useOidSecurityFilter\":\r\n                setUseOidSecurityFilter(value);\r\n                break;\r\n            case \"useGroupsSecurityFilter\":\r\n                setUseGroupsSecurityFilter(value);\r\n                break;\r\n            case \"shouldStream\":\r\n                setShouldStream(value);\r\n                break;\r\n            case \"useSuggestFollowupQuestions\":\r\n                setUseSuggestFollowupQuestions(value);\r\n                break;\r\n            case \"useGPT4V\":\r\n                setUseGPT4V(value);\r\n                break;\r\n            case \"gpt4vInput\":\r\n                setGPT4VInput(value);\r\n                break;\r\n            case \"vectorFields\":\r\n                setVectorFields(value);\r\n                break;\r\n            case \"retrievalMode\":\r\n                setRetrievalMode(value);\r\n                break;\r\n            case \"useAgenticRetrieval\":\r\n                setUseAgenticRetrieval(value);\r\n        }\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {/* Setting the page title using react-helmet-async */}\r\n            <Helmet>\r\n                <title>{t(\"pageTitle\")}</title>\r\n            </Helmet>\r\n            <div className={styles.commandsSplitContainer}>\r\n                <div className={styles.commandsContainer}>\r\n                    {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\r\n                        <HistoryButton className={styles.commandButton} onClick={() => setIsHistoryPanelOpen(!isHistoryPanelOpen)} />\r\n                    )}\r\n                </div>\r\n                <div className={styles.commandsContainer}>\r\n                    <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                    {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />}\r\n                    <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                </div>\r\n            </div>\r\n            <div className={styles.chatRoot} style={{ marginLeft: isHistoryPanelOpen ? \"300px\" : \"0\" }}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <img src={appLogo} alt=\"App logo\" width=\"120\" height=\"120\" />\r\n\r\n                            <h1 className={styles.chatEmptyStateTitle}>{t(\"chatEmptyStateTitle\")}</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>{t(\"chatEmptyStateSubtitle\")}</h2>\r\n                            {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\r\n\r\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {isStreaming &&\r\n                                streamedAnswers.map((streamedAnswer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={streamedAnswer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={true}\r\n                                                key={index}\r\n                                                answer={streamedAnswer[1]}\r\n                                                index={index}\r\n                                                speechConfig={speechConfig}\r\n                                                isSelected={false}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\r\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {!isStreaming &&\r\n                                answers.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                index={index}\r\n                                                speechConfig={speechConfig}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\r\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder={t(\"defaultExamples.placeholder\")}\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                            showSpeechInput={showSpeechInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\r\n                    <HistoryPanel\r\n                        provider={historyProvider}\r\n                        isOpen={isHistoryPanelOpen}\r\n                        notify={!isStreaming && !isLoading}\r\n                        onClose={() => setIsHistoryPanelOpen(false)}\r\n                        onChatSelected={answers => {\r\n                            if (answers.length === 0) return;\r\n                            setAnswers(answers);\r\n                            lastQuestionRef.current = answers[answers.length - 1][0];\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText={t(\"labels.headerText\")}\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel={t(\"labels.closeButton\")}\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <Settings\r\n                        promptTemplate={promptTemplate}\r\n                        temperature={temperature}\r\n                        retrieveCount={retrieveCount}\r\n                        maxSubqueryCount={maxSubqueryCount}\r\n                        resultsMergeStrategy={resultsMergeStrategy}\r\n                        seed={seed}\r\n                        minimumSearchScore={minimumSearchScore}\r\n                        minimumRerankerScore={minimumRerankerScore}\r\n                        useSemanticRanker={useSemanticRanker}\r\n                        useSemanticCaptions={useSemanticCaptions}\r\n                        useQueryRewriting={useQueryRewriting}\r\n                        reasoningEffort={reasoningEffort}\r\n                        excludeCategory={excludeCategory}\r\n                        includeCategory={includeCategory}\r\n                        retrievalMode={retrievalMode}\r\n                        useGPT4V={useGPT4V}\r\n                        gpt4vInput={gpt4vInput}\r\n                        vectorFields={vectorFields}\r\n                        showSemanticRankerOption={showSemanticRankerOption}\r\n                        showQueryRewritingOption={showQueryRewritingOption}\r\n                        showReasoningEffortOption={showReasoningEffortOption}\r\n                        showGPT4VOptions={showGPT4VOptions}\r\n                        showVectorOption={showVectorOption}\r\n                        useOidSecurityFilter={useOidSecurityFilter}\r\n                        useGroupsSecurityFilter={useGroupsSecurityFilter}\r\n                        useLogin={!!useLogin}\r\n                        loggedIn={loggedIn}\r\n                        requireAccessControl={requireAccessControl}\r\n                        shouldStream={shouldStream}\r\n                        streamingEnabled={streamingEnabled}\r\n                        useSuggestFollowupQuestions={useSuggestFollowupQuestions}\r\n                        showSuggestFollowupQuestions={true}\r\n                        showAgenticRetrievalOption={showAgenticRetrievalOption}\r\n                        useAgenticRetrieval={useAgenticRetrieval}\r\n                        onChange={handleSettingsChange}\r\n                    />\r\n                    {useLogin && <TokenClaimsDisplay />}\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import { DefaultButton } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./LoginButton.module.css\";\r\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { LoginContext } from \"../../loginContext\";\r\n\r\nexport const LoginButton = () => {\r\n    const { instance } = useMsal();\r\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [username, setUsername] = useState(\"\");\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        const fetchUsername = async () => {\r\n            setUsername((await getUsername(instance)) ?? \"\");\r\n        };\r\n\r\n        fetchUsername();\r\n    }, []);\r\n\r\n    const handleLoginPopup = () => {\r\n        /**\r\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\r\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\r\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\r\n         */\r\n        instance\r\n            .loginPopup({\r\n                ...loginRequest,\r\n                redirectUri: getRedirectUri()\r\n            })\r\n            .catch(error => console.log(error))\r\n            .then(async () => {\r\n                setLoggedIn(await checkLoggedIn(instance));\r\n                setUsername((await getUsername(instance)) ?? \"\");\r\n            });\r\n    };\r\n    const handleLogoutPopup = () => {\r\n        if (activeAccount) {\r\n            instance\r\n                .logoutPopup({\r\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\r\n                    account: instance.getActiveAccount()\r\n                })\r\n                .catch(error => console.log(error))\r\n                .then(async () => {\r\n                    setLoggedIn(await checkLoggedIn(instance));\r\n                    setUsername((await getUsername(instance)) ?? \"\");\r\n                });\r\n        } else {\r\n            appServicesLogout();\r\n        }\r\n    };\r\n    return (\r\n        <DefaultButton\r\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\r\n            className={styles.loginButton}\r\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\r\n        ></DefaultButton>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\r\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./Layout.module.css\";\r\n\r\nimport { useLogin } from \"../../authConfig\";\r\n\r\nimport { LoginButton } from \"../../components/LoginButton\";\r\nimport { IconButton } from \"@fluentui/react\";\r\n\r\nconst Layout = () => {\r\n    const { t } = useTranslation();\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\r\n\r\n    const toggleMenu = () => {\r\n        setMenuOpen(!menuOpen);\r\n    };\r\n\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n            setMenuOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (menuOpen) {\r\n            document.addEventListener(\"mousedown\", handleClickOutside);\r\n        } else {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        }\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [menuOpen]);\r\n\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer} ref={menuRef}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>{t(\"headerTitle\")}</h3>\r\n                    </Link>\r\n                    <nav>\r\n                        <ul className={`${styles.headerNavList} ${menuOpen ? styles.show : \"\"}`}>\r\n                            <li>\r\n                                <NavLink\r\n                                    to=\"/\"\r\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    onClick={() => setMenuOpen(false)}\r\n                                >\r\n                                    {t(\"chat\")}\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink\r\n                                    to=\"/qa\"\r\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    onClick={() => setMenuOpen(false)}\r\n                                >\r\n                                    {t(\"qa\")}\r\n                                </NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <div className={styles.loginMenuContainer}>\r\n                        {useLogin && <LoginButton />}\r\n                        <IconButton\r\n                            iconProps={{ iconName: \"GlobalNavButton\" }}\r\n                            className={styles.menuToggle}\r\n                            onClick={toggleMenu}\r\n                            ariaLabel={t(\"labels.toggleMenu\")}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { LoginContext } from \"./loginContext\";\r\nimport Layout from \"./pages/layout/Layout\";\r\n\r\nconst LayoutWrapper = () => {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    if (useLogin) {\r\n        var msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n        // Default to using the first account if no account is active on page load\r\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\r\n        }\r\n\r\n        // Listen for sign-in event and set active account\r\n        msalInstance.addEventCallback(event => {\r\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\r\n                const account = event.payload as AccountInfo;\r\n                msalInstance.setActiveAccount(account);\r\n            }\r\n        });\r\n\r\n        useEffect(() => {\r\n            const fetchLoggedIn = async () => {\r\n                setLoggedIn(await checkLoggedIn(msalInstance));\r\n            };\r\n\r\n            fetchLoggedIn();\r\n        }, []);\r\n\r\n        return (\r\n            <MsalProvider instance={msalInstance}>\r\n                <LoginContext.Provider\r\n                    value={{\r\n                        loggedIn,\r\n                        setLoggedIn\r\n                    }}\r\n                >\r\n                    <Layout />\r\n                </LoginContext.Provider>\r\n            </MsalProvider>\r\n        );\r\n    } else {\r\n        return (\r\n            <LoginContext.Provider\r\n                value={{\r\n                    loggedIn,\r\n                    setLoggedIn\r\n                }}\r\n            >\r\n                <Layout />\r\n            </LoginContext.Provider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default LayoutWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { I18nextProvider } from \"react-i18next\";\r\nimport { HelmetProvider } from \"react-helmet-async\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport LayoutWrapper from \"./layoutWrapper\";\r\nimport i18next from \"./i18n/config\";\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <LayoutWrapper />,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/ask/Ask\")\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <I18nextProvider i18n={i18next}>\r\n            <HelmetProvider>\r\n                <RouterProvider router={router} />\r\n            </HelmetProvider>\r\n        </I18nextProvider>\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-aYm4K0OA.js"}